                               - task_sheduler -                      Page    1

###############################################################################
#                                                                             #
#     IAR Assembler V6.30.1.53127/W32 for ARM 13/May/2017  15:37:10           #
#     Copyright 1999-2011 IAR Systems AB.                                     #
#                                                                             #
#           Source file   =  E:\STM32\LScan\task_sheduler.s                   #
#           List file     =  E:\STM32\LScan\Debug\List\task_sheduler.lst      #
#           Object file   =  E:\STM32\LScan\Debug\Obj\task_sheduler.o         #
#           Command line  =  E:\STM32\LScan\task_sheduler.s                   #
#                            -OE:\STM32\LScan\Debug\Obj\ -s+ -M<> -w+ -r      #
#                            -LE:\STM32\LScan\Debug\List\ -cM -i -B -p80 -t8  #
#                            -xDI2 --cpu Cortex-M4 --fpu VFPv4_sp             #
#                                                                             #
###############################################################################

    1                           /*============================================
                                ==================================

    2                                                     task scheduler

    3                                                   @dem1305 15.04.2017

    4                           ==============================================
                                ================================*/

    5                           #include "threads_def.h"

    1                           /**

    2                             Laser project by dem1305

    3                           

    4                             @2017

    5                             

    6                             Threads

    7                             файл определений

    8                           */

    9                           //--------------------------------------------
                                --------------------------------//

   10                           

   11                           

   12                           #ifndef __THREADS_DEF_H

   13                           #define __THREADS_DEF_H

   14                           //--------------------------------------------
                                --------------------------------//

   15                           /*

   16                           переключение потоков происходит по истечении
                                 TSW_TIMx_CYCLES циклов 

   17                           таймера , прерывания которого следуют с
                                 интервалом TSW_TIME_MS :

   18                           TSW_TIMx_CYCLES * TSW_TIME_MS = квант времени
                                 одного контекста 

   19                           */

   20                           #define TSW_TIMx_CYCLES       5          
                                 //количество интервалов таймера для переключен
                                ия

   21                           

   22                           #define TSW_TIME_MS           1          
                                 //интервал таймера переключения контекстов
                               - task_sheduler -                      Page    2


   23                           #define TTIMER_IT_PRIO        13         
                                 //приоритет системного таймера сервисов

   24                           #define TSVCALL_IT_PRIO       13         
                                 //приоритет прерываний SVCall

   25                           #define TPENDSV_IT_PRIO       15         
                                 //приоритет прерываний PendSV (самый
                                 низкий)

   26                           //--------------------------------------------
                                --------------------------------//

   27                           // MODE MASK

   28                           #define TPRIV_BIT_Pos       0

   29                           #define TPRIV_Msk           (1UL << TPRIV_BIT_
                                Pos)

   30                           

   31                           #define TSTACK_MODE_BIT_Pos 1

   32                           #define TSTACK_MODE_Msk     (1UL << TSTACK_MOD
                                E_BIT_Pos)

   33                           

   34                           #define TFPU_MODE_BIT_Pos   2

   35                           #define TFPU_MODE_Msk       (1UL << TFPU_MODE_
                                BIT_Pos)

   36                           

   37                           #define TPRIO_BIT_Pos       3

   38                           #define TPRIO_Msk           (31UL <<
                                 TPRIO_BIT_Pos)

   39                           

   40                           #define TCRITSECT_BIT_Pos   8

   41                           #define TCRITSECT_Msk       (1UL << TCRITSECT_
                                BIT_Pos)

   42                           

   43                           #define TSUSPENDED_BIT_Pos  9

   44                           #define TSUSPENDED_Msk      (1UL << TSUSPENDED
                                _BIT_Pos)

   45                           

   46                           #define TSTACKSIZE_BIT_Pos  10

   47                           #define TSTACKSIZE_Msk      (1UL << TSTACKSIZE
                                _BIT_Pos)

   48                           

   49                           //режимы

   50                           #define CTRL_FPU_INIT_VAL   TFPU_MODE_Msk
                                 //необходимость начальной инициализации FPU
                                 (бит 2 CONTROL,при reset,MSP)

   51                           

   52                           #define TM_PRIV             0              
                                 //привилегированный

   53                           #define TM_NPRIV            TPRIV_Msk      
                                 //непривилегированный
                               - task_sheduler -                      Page    3


   54                           

   55                           #define TM_MSP              0              
                                 //используется MSP

   56                           #define TM_PSP              TSTACK_MODE_Msk
                                 //используется PSP

   57                           

   58                           /*

   59                           сохранять контекст FPU в стеке PSP потока
                                 (1=нет)

   60                           CONTROL register bit 2 = FPCA: Indicates
                                 whether floating-point context currently
                                 active:

   61                           0: No floating-point context active

   62                           1: Floating-point context active.

   63                           

   64                           На данном этапе реализовано только начальное
                                 задание использования контекста FPU

   65                           для размещения в стеке.TM_FPU используется при
                                 начальной инициализации

   66                           и распространяется на все потоки в дальнейшем.
                                Поэтому далее это значение 

   67                           указывать не нужно.

   68                           */

   69                           #define TM_NFPU             0

   70                           #define TM_FPU              TFPU_MODE_Msk

   71                           

   72                           #define TM_CREATE_SUSPENDED TSUSPENDED_Msk 
                                 //приостановлен

   73                           #define TM_SET_STACK_SIZE   TSTACKSIZE_Msk 
                                 //при создании потока задать размер стека

   74                           /* ===========================================
                                ===========================

   75                                 CONTROL register

   76                                 доступ только в привелигированном
                                 режиме

   77                                 использовать команды MSR, MRS .

   78                                 имена битов:

   79                           

   80                           #define CTRL_PRIV    0x00000000 //бит 0
                                 привилегированный режим Thread Mode

   81                           #define CTRL_NPRIV   0x00000001 //бит 0 не
                                 привилегированный режим Thread Mode

   82                           

   83                           #define CTRL_MSPSEL  0x00000000 //бит 1 выбор
                                 стека для Handler Mode (0: MSP, 1: PSP)

   84                           #define CTRL_PSPSEL  0x00000002 //бит 1 выбор
                                 стека для Handler Mode (0: MSP, 1: PSP)
                               - task_sheduler -                      Page    4


   85                           

   86                           #define CTRL_FPSP    0x00000004 //сохранять ли
                                 контекст FPU в стеке

   87                           */

   88                           //EXC_RETURN

   89                           #define EXC_RET_USE_BITMSK  0x1F      
                                 //исполльзуемые биты

   90                           

   91                           #define EXC_RET_BASE        0xFFFFFFE1

   92                           

   93                           #define EXC_RET_HALDLER_MSP 0xFFFFFFF1
                                 //возврат в режим обработчика c использованием
                                 MSP[0001]

   94                           #define EXC_RET_THREAD_MSP  0xFFFFFFF9
                                 //возврат в режим потока c использованием
                                 MSP[1001]

   95                           #define EXC_RET_THREAD_PSP  0xFFFFFFFВ
                                 //возврат в режим потока c использованием
                                 PSP[1011]

   96                           //-----битовые значения возврата------

   97                           #define EXC_RET_MSP     0   //возврат с
                                 использованием стека MSP

   98                           #define EXC_RET_PSP     4   //возврат с
                                 использованием стека PSP

   99                           

  100                           #define EXC_RET_HALDLER 0   //возврат в режим
                                 обработчика

  101                           #define EXC_RET_THREAD  8   //возврат в режим
                                 потока

  102                           //значение бита использования FPU при возврате
                                 (стек тот же,что у потока)

  103                           #define EXC_RET_NOFPU   16

  104                           #define EXC_RET_USEFPU  0

  105                           

  106                           

  107                           //--------------------------------------------
                                --------------------------------//

  108                           #define TSV_TIMER             TIM2            
                                      //таймер планировщика

  109                           #define TSV_TIMER_BASE_ADR    0x40000000      
                                      //TIM2 BASE

  110                           

  111                           #define TIMx_SR_OFFSET        0x10            
                                      //TIM SR register offset

  112                           #define TIMx_DIER_OFFSET      0x0C            
                                      //TIM DIER register offset

  113                           

  114                           #define NVIC_BASE_ADR         0xE000E100  //!<
                               - task_sheduler -                      Page    5

                                 NVIC Base Address                  */

  115                           

  116                           #define TSV_TIM_NVIC_ISER_OFS 0     
                                 //смещение регистра разреш.прерывания
                                 таймера

  117                           #define TSV_TIM_NVIC_ICER_OFS 0x080 
                                 //смещение регистра запрета прерывания
                                 таймера

  118                           #define TSV_TIM_NVIC_BIT      29     //бит для
                                 разрешения/запрета прерывания= 1<<(irq&1F)

  119                           //#define TSV_TIM_NVIC_BIT_VAL  (1UL<<TSV_TIM_
                                NVIC_BIT)     

  120                           

  121                           #define TSV_TIMER_RCC_APBCmd  RCC_APB1PeriphCl
                                ockCmd

  122                           #define TSV_TIMER_APBPeriph   RCC_APB1Periph_T
                                IM2

  123                           #define TSV_TIMER_PSC_1MS     ((uint16_t)2)

  124                           #define TSV_TIMER_ARR_1MS     ((uint16_t)42000
                                )

  125                           

  126                           #define TSV_TIMER_IRQ         TIM2_IRQn

  127                           #define TSV_TIMER_IRQ_HNDLR   TIM2_IRQHandler

  128                           //--------------------------------------------
                                --------------------------------//

  129                           //-------смещения в стеке (PSR PC LR R12 R3 R2
                                 R1 R0) -------

  130                           #define st_PSR  28    

  131                           #define st_PC   24

  132                           #define st_LR   20

  133                           #define st_R12  16

  134                           #define st_R3   12

  135                           #define st_R2   8

  136                           #define st_R1   4

  137                           #define st_R0   0

  138                           //--------------------------------------------
                                --------------------------------//

  139                           #define _OCORE_SIZE   16    //размер структуры
                                 объекта ядра,в байтах (threads.h)

  140                           //--------thread struct offset vals--------

  141                           //--------структура coreobj------->>

  142                           #define offs_ty       0     //16 бит
                                 тип

  143                           #define offs_flags    2     //16 бит
                                 флаги

  144                           #define offs_sync     4     //корень списка
                                 синхронизации (двунаправленный)

                               - task_sheduler -                      Page    6

  145                           #define offs_prev     8     //предыдущий
                                 контекст

  146                           #define offs_next     12    //следующий
                                 контекст

  147                           //--------структура coreobj-------<<

  148                           #define offs_mode     (0+_OCORE_SIZE)   
                                 //маска режимов

  149                           #define offs_id       (4+_OCORE_SIZE)   
                                 //идентификатор потока (int,положительное)

  150                           

  151                           #define offs_tstack   (8+_OCORE_SIZE)   
                                 //текущая вершина стека

  152                           #define offs_tstaRAM  (12+_OCORE_SIZE)  
                                 //вершина стека

  153                           #define offs_tstsize  (16+_OCORE_SIZE)  
                                 //размер стека

  154                           

  155                           #define offs_sleep_ms (20+_OCORE_SIZE)  
                                 //всего спать INFINITE=(ULONG)-1 -вечный
                                 сон

  156                           //--------------------------------------------
                                --------------------------------//

  157                           //типы объектов ядра

  158                           #define TY_THREAD         0

  159                           #define TY_SEMAPHORE      1

  160                           #define TY_MUTEX          2

  161                           #define TY_EVENT          3

  162                           //--------------------------------------------
                                --------------------------------//

  163                           

  164                           #define SCS_BASE            (0xE000E000UL)    
                                                        /*!< System Control
                                 Space Base Address  */

  165                           #define ITM_BASE            (0xE0000000UL)    
                                                        /*!< ITM Base Address  
                                                 */

  166                           #define CoreDebug_BASE      (0xE000EDF0UL)    
                                                        /*!< Core Debug Base
                                 Address            */

  167                           #define SysTick_BASE        (SCS_BASE + 
                                 0x0010UL)                    /*!< SysTick Base
                                 Address               */

  168                           #define NVIC_BASE           (SCS_BASE + 
                                 0x0100UL)                    /*!< NVIC Base
                                 Address                  */

  169                           #define SCB_BASE            (SCS_BASE + 
                                 0x0D00UL)                    /*!< System
                                 Control Block Base Address  */

  170                           

  171                           //System handler priority register 

  172                           #define SHPR_OFFSET     0x18
                               - task_sheduler -                      Page    7


  173                           #define SHPR2_OFFSET    0x1C

  174                           

  175                           //System handler co ntrol an d state register
                                 (SHCSR) , Address offset: 0x24

  176                           #define SHCSR_OFFSET    0x24

  177                           

  178                           //!< Offset: 0x014 (R/W)  Configuration
                                 Control Register  

  179                           #define SCB_CCR_REG     0xE000ED14 //32 bit (2
                                 WORD)

  180                           

  181                           //0-выравнивание стека 4 байт, 1-выравнивание
                                 стека 8 байт , бит 9 PSR - режим выравнивания

  182                           #define STKALIGN_VAL    0x200      //девятый
                                 бит в SBC->CCR   

  183                           

  184                           #define SCB_SHCSR_SVCALLPENDED_BitPos        
                                 15                                            
                                 //< SCB SHCSR: SVCALLPENDED Position
                                 

  185                           #define SCB_SHCSR_SVCALLPENDED_MskVal        
                                 (1UL << SCB_SHCSR_SVCALLPENDED_BitPos)        
                                 //< SCB SHCSR: SVCALLPENDED Mask 

  186                           //-------------------

  187                           #define SCB_ICSR_OFFSET 0x004 //(R/W) 
                                 Interrupt Control and State Register

  188                           

  189                           #define SCB_ICSR_PENDSVSET_BitPos            
                                 28                                            
                                 /*!< SCB ICSR: PENDSVSET Position */

  190                           #define SCB_ICSR_PENDSVSET_MskVal            
                                 (1UL << SCB_ICSR_PENDSVSET_BitPos)            
                                    /*!< SCB ICSR: PENDSVSET Mask */

  191                           

  192                           #define SCB_ICSR_PENDSVCLR_BitPos            
                                 27                                            
                                 /*!< SCB ICSR: PENDSVCLR Position */

  193                           #define SCB_ICSR_PENDSVCLR_MskVal            
                                 (1UL << SCB_ICSR_PENDSVCLR_BitPos)    
                                 

  194                           //--------------------------------------------
                                --------------------------------//

  195                           #define ERR_EXC_RET     1

  196                           

  197                           #define ERR_UP_PSP_LIM  2 //указатель вершины
                                 стека PSP выше выделенной области RAM

  198                           #define ERR_LO_PSP_LIM  4 //указатель вершины
                                 стека PSP ниже выделенной области RAM

  199                           

  200                           //--------------------------------------------
                               - task_sheduler -                      Page    8

                                --------------------------------//

  201                           #ifndef INFINITE

  202                           //все определения бесконечности в пределах 32
                                 бит

  203                           #define INFINITE  (0xFFFFFFFFUL) //((ULONG)-1)
                                 4 байта

  204                           #endif

  205                           //--------------------------------------------
                                --------------------------------//

  206                           #endif//__THREADS_DEF_H

    6                           //--------------------------------------------
                                --------------------------------//

    7                                   MODULE  task_s

    8                                   

    9                           

   10                                   ;; Forward declaration of sections.

   11                                   SECTION TASK_S:DATA:ROOT(3) //align 8
                                 bytes

   12                                   

   13                           //-----------IMPORT---------------------      
                                  

   14                                   EXTERN  __iar_program_start

   15                                   EXTERN  __iar_init_vfp    //FPU
                                 init

   16                                   EXTERN  __low_level_init

   17                                   EXTERN  __iar_data_init3  //glob.data
                                 init

   18                                   

   19                                   EXTERN  SystemInit  //RCC

   20                                   EXTERN  HardFault_Handler

   21                                   

   22                                   EXTERN  __vector_table

   23                                   EXTERN  InitSheduler//main sheduler
                                 service

   24                                   EXTERN  main

   25                                   EXTERN  start_svc   //start services

   26                                   EXTERN  led_loop

   27                                   EXTERN  dbg_error_led

   28                                   EXTERN  LSCAN2_LEDToggle

   29                                   EXTERN  ccfree //void  ccfree(void*
                                 m)//освобождение памяти

   30                                   EXTERN  __SVC_sw_thread

   31                           //-----------EXPORT FUNCTIONS-----------------
                                -----  

   32                                   PUBLIC  Reset_Handler
                               - task_sheduler -                      Page    9


   33                                   PUBLIC  TSV_TIMER_IRQ_HNDLR

   34                                   

   35                                   PUBLIC  svc_new_thrd //новый
                                 поток

   36                                   PUBLIC  DeleteThread //удаление потока
                                 int DeleteThread(TCONTEXT* ptctx);

   37                                   PUBLIC  EnterCriticalSection

   38                                   PUBLIC  LeaveCriticalSection

   39                                   PUBLIC  SetThreadPriority //char
                                 SetThreadPriority(HTHREAD pCTX,uint8_t
                                 priority);

   40                                   PUBLIC  ResumeThread      //int
                                 ResumeThread(HTHREAD hTrd); //return
                                 -1=error

   41                                   PUBLIC  SuspendThread     //int
                                 SuspendThread(HTHREAD hTrd);//return
                                 -1=error

   42                                   PUBLIC  call_set_suspend

   43                                   PUBLIC  call_set_sleep

   44                                   PUBLIC  GetThreadId     //int
                                 GetThreadId(HTHREAD hTrd);//return -1=error

   45                                   PUBLIC  GetThreadHandle //HTHREAD
                                 GetThreadHandle(int id);//return -1=error

   46                                   PUBLIC  ExitThread //int ExitThread(in
                                t)завершение текущего потока сзаданным кодом
                                 возврата

   47                                   

   48                                   PUBLIC  call_add_core_obj

   49                           //-----------EXPORT VARIABLES-----------------
                                -----        

   50                                   PUBLIC  topMSP    //MSP realloc
                                 value

   51                                   

   52                                   PUBLIC  pctcon    //текущий контекст

   53                                   PUBLIC  _proot_   //anchor of
                                 list,root coreobj* 

   54                                   PUBLIC  _pend_    //end of list

   55                                           

   56                                   PUBLIC  SystemTicks //sys timer
                                 inc.val

   57                                   PUBLIC  tswFLdis0   //SW flags

   58                           //============================================
                                ==================================

   59                                   SECTION TASK_S:DATA:ROOT(2)    //ALIGN
                                 4

   60                                   

   61    00000000 00000000      topMSP          DCD   0   //нужно ли переаллока
 ция MSP,верхняя граница 

                               - task_sheduler -                      Page   10

   62                           //------

   63    00000004 00000000      _proot_         DCD   0   //якорь списка
  объектов ядра

   64    00000008 00000000      _pend_          DCD   0   //конец списка
  объектов ядра

   65                           

   66    0000000C 00000000      pctcon          DCD   0   //текущий поток
  

   67                           //--------------------------------------------
                                ----------------------------------  

   68    00000010 00000000      SystemTicks   DCD 0   //счетчик импульсов
  таймера переключения контекстов (1 мс)

   69                           //--------------------------------------------
                                ----------------------------------  

   70    00000014 00000000      tswFLdis0 DCD  0   //флаги переключения

   71                           /* биты :

   72                           [0] == 1-запрет переключения 

   73                           [1] == 2-пропуск одного переключения

   74                           [2] == 4-запустить текущий поток 

   75                           */

   76    00000018 05            _ccyc_    DCB  TSW_TIMx_CYCLES   // циклов до
  переключения

   77                           //--------------------------------------------
                                -------------

   78    00000019 00                    THUMB

   79                           //=========================сброс,инициализация
                                ==================================

   80                                   SECTION .text:CODE(2)

   81                           Reset_Handler

   82    00000000 DFF8B801              LDR.W   R0, =SystemInit

   83    00000004 8047                  BLX     R0

   84                                   //LDR     R0, =__iar_program_start

   85    00000006 6E48                  LDR     R0, =init_sheduler

   86    00000008 0047                  BX      R0

   87                           

   88                           //====================создание нового потока
                                 (процесса)=========================       
                                 

   89                           svc_new_thrd: //запуск нового потока
                                 

   90                                   //PSR PC LR R12 R3 R2 R1 R0

   91    0000000A 2DE90F50              PUSH {R0-R3,R12,LR}

   92                                   //R0==param {(uint32_t)pFunc,(uint32_t
                                )pArgs,(uint32_t)pCTX}; (в стеке)

   93    0000000E 05DF                  SVC #5 //set priveleged mode

   94                                   //сохранить состояние потока
                               - task_sheduler -                      Page   11


   95    00000010 6C49                  LDR R1, =pctcon //указатель на
                                                 контекст

   96    00000012 0968                  LDR R1,[R1]     //значение указателя

   97    00000014 11B1                  CBZ R1,snt_set_pctx

   98                                   //сохранить указатель стека

   99    00000016 EFF30982              MRS R2,PSP

  100    0000001A 8A61                  STR R2,[R1,#offs_tstack]     

  101                                   //-----------подготовка к установке
                                 контекста-------------

  102                           snt_set_pctx:

  103    0000001C 8168                  LDR R1,[R0,#8]  //указатель на контекст
                                                pCTX

  104                                   //LDR R1,[R1]     //значение
                                 указателя

  105    0000001E 8A69                  LDR R2,[R1,#offs_tstack]

  106    00000020 82F30988              MSR PSP,R2 //переключение стека

  107    00000024 BFF36F8F              ISB

  108                                   //----сохранение контекста FPU--------

  109    00000028 0A69                  LDR R2,[R1,#offs_mode]

  110    0000002A 12F00402              ANDS R2,R2,#TM_FPU 

  111    0000002E 04D0                  BEQ snt_push8regs //0==no FPU

  112    00000030 F1EE102A              VMRS R2,FPSCR

  113    00000034 04B4                  PUSH {R2}       //1 reg FPSCR

  114    00000036 2DED100A              VPUSH {S0-S15} //16regs

  115                           snt_push8regs:

  116                                   //PSR-------переписать PSR(бит
                                 9=выравнивание)

  117    0000003A 634A                  LDR R2,=SCB_CCR_REG//=0xE000ED14 = 8b
                                                align else 4b align

  118    0000003C 1268                  LDR R2,[R2] //bit 9

  119    0000003E 42F08072              ORR R2,R2,#0x1000000 //24 bit(THUMB)

  120    00000042 04B4                  PUSH {R2} //PSR=0/0x200

  121                                   //PC----------------        

  122                                   //бит 0 должен быть установлен!(Thumb)

  123    00000044 614A                  LDR R2,=tfunc_wrapper

  124    00000046 04B4                  PUSH {R2} //PC

  125                                   //LR----------------

  126    00000048 614A                  LDR R2,=twrap_del

  127    0000004A 04B4                  PUSH {R2} //LR

  128                                   //other registers

  129    0000004C 0168                  LDR R1,[R0] //pFunc

  130    0000004E 2DE90E10              PUSH {R1-R3,R12} 
                               - task_sheduler -                      Page   12


  131    00000052 4268                  LDR R2,[R0,#4]//args for pFunc

  132    00000054 04B4                  PUSH {R2}//R0

  133                                   //сохранение вершины стека

  134    00000056 8168                  LDR R1,[R0,#8]  //указатель на контекст
                                                pCTX

  135    00000058 EFF30982              MRS R2,PSP 

  136    0000005C 8A61                  STR R2,[R1,#offs_tstack]

  137                                           

  138                                   //проверка указателей

  139    0000005E 5949                  LDR R1, =pctcon //указатель на
                                                 контекст

  140    00000060 0968                  LDR R1,[R1]     //значение указателя

  141    00000062 11B9                  CBNZ R1,snt_rest_stack //если pctcon!=0
                                                 восстановить контекст

  142    00000064 8368                  LDR R3,[R0,#8]

  143    00000066 574A                  LDR R2,=pctcon //установить текущим

  144    00000068 1360                  STR R3,[R2] //ptcon=pCTX

  145                                   

  146                                   //восстановить указатель стека

  147                           snt_rest_stack:

  148    0000006A 8A69                  LDR R2,[R1,#offs_tstack]

  149    0000006C 82F30988              MSR PSP,R2

  150    00000070 BFF36F8F              ISB

  151                                   //----подключение потока в список-----

  152    00000074 8068                  LDR R0,[R0,#8]  //указатель на контекст
                                                CTX

  153    00000076 01DF                  SVC #1

  154                                   //----вернуть режим привилегий--------

  155    00000078 0969                  LDR R1,[R1,#offs_mode]

  156    0000007A 11F00101              ANDS R1,R1,#(TM_NPRIV)

  157    0000007E 18BF                  IT NE

  158    00000080 04DF                  SVCNE #4 //set npriv 

  159                                   

  160                           ret_svc_new_thrd:

  161    00000082 BDE80F50              POP {R0-R3,R12,LR}

  162    00000086 7047                  BX LR

  163                           //========================функция удаления
                                 потока===============================

  164                           DeleteThread:

  165    00000088 00DF              SVC #0 //R0==удаляемый контекст

  166    0000008A 7047              BX LR

                               - task_sheduler -                      Page   13

  167                           //=============функция изменения приоритета
                                 потока==============================

  168                           //передача параметров через стек

  169                           //int SetThreadPriority(HTHREAD pCTX,uint8_t
                                 priority);

  170                           SetThreadPriority: 

  171                           call_set_thread_prio:

  172    0000008C 03DF              SVC #3 //R0=pctx R1=prio

  173    0000008E 7047              BX LR

  174                           //================критическая секция,запрет
                                 переключения========================   
                                 

  175                           EnterCriticalSection:

  176    00000090 00B5              PUSH {LR}

  177    00000092 0CDF              SVC #12

  178    00000094 00BD              POP {PC}

  179                           LeaveCriticalSection:

  180    00000096 00B5              PUSH {LR}

  181    00000098 0DDF              SVC #13

  182    0000009A 00BD              POP {PC}

  183                           //========================обертка функции
                                 потока================================
                                 

  184                           //выполнение функции потока и зачистка по
                                 завершению,возврат результата в R0

  185                           //R1=func R0=arg R2=ctx

  186                           tfunc_wrapper:

  187    0000009C 8847             BLX R1 

  188                              //R0==значение возврата потока

  189                           twrap_del: 

  190    0000009E 494A             LDR R2,=pctcon //текущий

  191    000000A0 0446             MOV R4,R0

  192    000000A2 1068             LDR R0,[R2] //R0=удаляемый контекст

  193    000000A4 00DF             SVC #0 //R4==удаляемый контекст

  194    000000A6 2046             MOV R0,R4 //ret val

  195                           twrap_wfi:

  196    000000A8 30BF             WFI

  197    000000AA FDE7             B twrap_wfi//led_loop

  198                           //================= запуск корневого потока
                                 (+планировщик)====================== 
                                 

  199                           

  200                           init_sheduler:           

  201                            /*
                               - task_sheduler -                      Page   14


  202                            __iar_program_start ! инициализация
                                 глобальных переменных и библиотек

  203                            переход к main

  204                            

  205                            для инициализации памяти необходимо время
                                 !

  206                            инициализация констант ассемблера происходит
                                 в __low_lewel_init

  207                            инициализация глобальных структур C
                                 происходит в __iar_data_init3

  208                           */     

  209                                   //инициализация массивов и переменных

  210    000000AC ........              BL  __low_level_init

  211    000000B0 0028                  CMP R0,#0

  212    000000B2 01D0                  BEQ _init_root_

  213    000000B4 ........              BL  __iar_data_init3 //инициализация
                                                              глобальных
                                                              переменных и
                                                              массивов

  214                                   //-----выравнивание стека------

  215                                   //LDR R2, =SBC_CCR_REG //=0xE000ED14
                                 

  216                                   //LDR R0,[R2]

  217                                   //BIC R0,R0,#0x200 //0x200 = 8b align
                                 else 4b align

  218                                   //STR R0,[R2]

  219                                   //LDR R0,[R2]

  220                                   //AND R0,R0,#(STKALIGN_VAL) 

  221                                   //-----

  222                                   

  223                           _init_root_:        

  224    000000B8 ........              BL InitSheduler //init sys timer and
                                                         root thread

  225                                   

  226    000000BC 4549                  LDR R1,=topMSP

  227    000000BE 0868                  LDR R0,[R1]

  228    000000C0 0028                  CMP R0,#0

  229    000000C2 03D0                  BEQ reallocPSP 

  230    000000C4 80F30888              MSR MSP, R0

  231    000000C8 BFF36F8F              ISB //сброс конвейера

  232                                   

  233                           reallocPSP:  

  234    000000CC 4249                  LDR R1,=_proot_

  235    000000CE 0968                  LDR R1,[R1]
                               - task_sheduler -                      Page   15


  236    000000D0 8869                  LDR R0,[R1,#offs_tstack]

  237    000000D2 80F30988              MSR PSP, R0

  238    000000D6 BFF36F8F              ISB 

  239                           //установка режимов доступа

  240    000000DA 0869                  LDR R0,[R1,#offs_mode]

  241    000000DC 00F00700              AND R0,R0,#7

  242    000000E0 80F31488              MSR CONTROL, R0     //FPU,PSP
                                                      ,privileged mode

  243    000000E4 BFF36F8F              ISB                 //сброс конвеера
                                                             инструкций
                                                             

  244                                   

  245    000000E8 10F00400              ANDS R0,R0,#(TM_FPU)

  246    000000EC 01D0                  BEQ set_current_ctx //0==no FPU

  247    000000EE ........              BL  __iar_init_vfp  //FPU init

  248                                   

  249                           set_current_ctx:        

  250    000000F2 344A                  LDR R2, =pctcon     //указатель на
                                                 контекст

  251    000000F4 3848                  LDR R0, =_proot_    //адрес контекста

  252    000000F6 0068                  LDR R0,[R0]

  253    000000F8 C2F80000              STR.W R0,[R2]       //записать адрес
                                                  контекста по значению
                                                  указателя pctcon

  254    000000FC 374A                  LDR R2, =_pend_     //конец списка

  255    000000FE C2F80000              STR.W R0,[R2]       //записать адрес
                                                  контекста по значению
                                                  указателя 

  256                                   

  257    00000102 ........              BL start_svc    //change ctx

  258                                   

  259    00000106 4FF00000              MOV  R0,#0

  260    0000010A 3549                  LDR  R1,=main        

  261    0000010C C6E7                  B tfunc_wrapper//start main thread
                                                         (id=1)

  262                           //================= системный таймер
                                 квантования ===============================
                                 

  263                           TSV_TIMER_IRQ_HNDLR:

  264                           

  265    0000010E 07B5            PUSH {R0-R2,LR}

  266                             //TIM2->SR &= (uint16_t)~TIM_SR_UIF;// Clear
                                 the IT update pending Bit

  267    00000110 344A            LDR.N     R2, =(TSV_TIMER_BASE_ADR+TIMx_SR_OF
                                                FSET)

                               - task_sheduler -                      Page   16

  268    00000112 1088            LDRH      R0, [R2]

  269    00000114 4FF6FE71        MOVW      R1, #0xfffe

  270    00000118 0840            ANDS      R0, R0, R1

  271    0000011A 1080            STRH      R0, [R2]

  272                             

  273    0000011C 3249            LDR R1,=SystemTicks //++

  274    0000011E 0868            LDR R0,[R1]

  275    00000120 00F10100        ADD R0,R0,#1

  276    00000124 0860            STR R0,[R1]

  277                             //----цикл по всем потокам sleep--
                                 ----

  278    00000126 2C48            LDR R0,=_proot_ //указатель

  279    00000128 0068            LDR R0,[R0]   //значение

  280                               

  281                           ttt_loop_search:

  282    0000012A 50B1            CBZ R0,ttt_chdis0 //нет больше

  283    0000012C 416A            LDR R1,[R0,#offs_sleep_ms]

  284    0000012E B1F1FF3F        CMP R1,#(INFINITE)

  285    00000132 04D0            BEQ ttt_ld_next //не декрементировать

  286    00000134 0029            CMP R1,#0

  287    00000136 02D0            BEQ ttt_ld_next //не декрементировать

  288    00000138 A1F10101        SUB R1,R1,#1    //декремент

  289    0000013C 4162            STR R1,[R0,#offs_sleep_ms]

  290                             

  291                           ttt_ld_next:

  292    0000013E C068            LDR R0,[R0,#offs_next]

  293    00000140 F3E7            B ttt_loop_search //следующий

  294                             //-------------------------------------

  295                           ttt_chdis0:

  296    00000142 2A48            LDR R0,=tswFLdis0

  297    00000144 0168            LDR R1,[R0]

  298    00000146 01F00101        AND R1,R1,#1

  299    0000014A 0129            CMP R1,#1

  300    0000014C 1ED0            BEQ.N ttt_ret //1 = запрет переключения

  301                             

  302    0000014E 2848            LDR   R0,=_ccyc_

  303    00000150 0178            LDRB   R1,[R0]

  304    00000152 A1F10101        SUB  R1,R1,#1

  305    00000156 0029            CMP   R1,#0

  306    00000158 1CBF            ITT   NE
                               - task_sheduler -                      Page   17


  307    0000015A 0170              STRBNE R1,[R0]

  308    0000015C 16E0              BNE.N ttt_ret //цикл не пройден 

  309                             //цикл пройден,смена контекстов

  310    0000015E 4FF00501        MOV  R1,#(TSW_TIMx_CYCLES)

  311    00000162 0170            STRB R1,[R0]

  312                             

  313                             //требуется ли пропустить переключение
                                 контекстов ?

  314    00000164 2148            LDR R0,=tswFLdis0

  315    00000166 0168            LDR R1,[R0]

  316    00000168 01F00202        AND R2,R1,#2 //пропуск?

  317    0000016C 21F00201        AND R1,R1,#0xFFFFFFFD //сброс пропуска

  318    00000170 0160            STR R1,[R0]

  319    00000172 5AB9            CBNZ R2,ttt_ret //2 = требуется пропуск

  320                             

  321    00000174 1348            LDR R0,=pctcon //текущий

  322    00000176 0068            LDR R0,[R0]

  323    00000178 D0F81010        LDR.W R1,[R0,#offs_mode] 

  324    0000017C 01F48071        AND.W R1,R1,#(TCRITSECT_Msk)

  325    00000180 21B9            CBNZ R1,ttt_ret //PC в критической секции

  326                             //---переключение контекста-------------

  327    00000182 1C48            LDR R0,=(SCB_BASE+SCB_ICSR_OFFSET)

  328    00000184 0168            LDR R1,[R0]

  329    00000186 41F08051        ORR R1,R1,#(SCB_ICSR_PENDSVSET_MskVal)

  330    0000018A 0160            STR R1,[R0]

  331                             //--------------------------------------

  332                           ttt_ret:

  333                             

  334    0000018C 07BD            POP {R0-R2,PC}

  335                           

  336                           //=================== приостановить поток R0
                                 на R1 ms ========================== 
                                 

  337                           //если R0==0-загрузить в R0 текущий поток

  338                           call_set_sleep:

  339    0000018E 00B5            PUSH {LR}

  340    00000190 06DF            SVC #6

  341    00000192 00BD            POP {PC}

  342                           //================= установки маски suspend R1
                                 потока R0 ======================= 

  343                           //если R0==0-загрузить в R0 текущий поток
                               - task_sheduler -                      Page   18


  344                           ResumeThread:

  345    00000194 4FF00001        MOV R1,#0

  346    00000198 01E0            B call_set_suspend

  347                           SuspendThread:

  348    0000019A 4FF40071        MOV R1,#(TM_CREATE_SUSPENDED)

  349                           call_set_suspend:

  350    0000019E 00B5            PUSH {LR}

  351    000001A0 07DF            SVC #7

  352    000001A2 00BD            POP {PC}

  353                           //================= вернуть ID потока R0
                                 =======================================
                                 

  354                           //если R0==0-загрузить в R0 HTHREAD текущего
                                 потока (поиск по HTHREAD)

  355                           GetThreadId:

  356    000001A4 00B5            PUSH {LR}

  357    000001A6 0ADF            SVC #10

  358    000001A8 00BD            POP {PC}

  359                           //================= вернуть HTHREAD потока с
                                 ID==R0 ============================

  360                           //если R0==0-загрузить в R0 ID текущeго потока
                                 (поиск по ID)

  361                           GetThreadHandle:

  362    000001AA 00B5            PUSH {LR}

  363    000001AC 0BDF            SVC #11

  364    000001AE 00BD            POP {PC}

  365                           //================= подключить объект к списку
                                 =================================

  366                           //R0=объект для подключения

  367                           call_add_core_obj:

  368    000001B0 00B5            PUSH {LR}

  369    000001B2 01DF            SVC #1

  370    000001B4 00BD            POP {PC}

  371                           //=== завершить текущий поток с заданным кодом
                                 возврата (R0)====================

  372                           ExitThread:

  373    000001B6 FFF772FF        BL twrap_del

  374                           //============================================
                                ==================================

  375                                         END

  375.1  000001BA 0000                   TABLE

  375.2  000001BC ........              Reference on line 82 

  375.3  000001C0 ........              Reference on line 85 
                               - task_sheduler -                      Page   19


  375.4  000001C4 ........              Reference on line 95,139,143,190,250,32
                                                  1 

  375.5  000001C8 14ED00E0              Reference on line 117 

  375.6  000001CC ........              Reference on line 123 

  375.7  000001D0 ........              Reference on line 126 

  375.8  000001D4 ........              Reference on line 226 

  375.9  000001D8 ........              Reference on line 234,251,278
                                                   

  375.10 000001DC ........              Reference on line 254 

  375.11 000001E0 ........              Reference on line 260 

  375.12 000001E4 10000040              Reference on line 267 

  375.13 000001E8 ........              Reference on line 273 

  375.14 000001EC ........              Reference on line 296,314 

  375.15 000001F0 ........              Reference on line 302 

  375.16 000001F4 04ED00E0              Reference on line 327 

  375.17                                END (including table)





EOF                  DELIMITER 

\n                   DELIMITER 

                     DELIMITER 

!                    OPERATOR 

!=                   OPERATOR 

%                    OPERATOR 

&                    OPERATOR 

&&                   OPERATOR 

(                    OPERATOR 

(                    DELIMITER 

)                    OPERATOR 

)                    DELIMITER 

*                    OPERATOR 

+                    OPERATOR 

,                    DELIMITER 

-                    OPERATOR 

.                    Target symbol: 24 

/                    OPERATOR 

/                    DELIMITER 

:                    Target symbol: 22 

:                    DELIMITER 

;                    Target symbol: 23 
                               - task_sheduler -                      Page   20


<                    OPERATOR 

<<                   OPERATOR 

<=                   OPERATOR 

<>                   OPERATOR 

=                    OPERATOR 

=                    DIRECTIVE 

==                   OPERATOR 

>                    OPERATOR 

>=                   OPERATOR 

>>                   OPERATOR 

@                    DELIMITER 

AAPCS                DIRECTIVE 

ALIAS                DIRECTIVE 

ALIGN                DIRECTIVE 

ALIGNRAM             DIRECTIVE 

ALIGNROM             DIRECTIVE 

ANOTE                DIRECTIVE 

APSR_NZCV            REGISTER 

ARGFRAME             DIRECTIVE 

ARM                  DIRECTIVE 

ASEGN                DIRECTIVE 

ASR                  MNEMONIC 

BIT                  SEGMENT TYPE 

BYTE1                OPERATOR 

BYTE2                OPERATOR 

BYTE3                OPERATOR 

BYTE4                OPERATOR 

C0                   REGISTER 

C1                   REGISTER 

C10                  REGISTER 

C11                  REGISTER 

C12                  REGISTER 

C13                  REGISTER 

C14                  REGISTER 

C15                  REGISTER 

C2                   REGISTER 

C3                   REGISTER 

C4                   REGISTER 

C5                   REGISTER 
                               - task_sheduler -                      Page   21


C6                   REGISTER 

C7                   REGISTER 

C8                   REGISTER 

C9                   REGISTER 

CALL_GRAPH_ROOT      DIRECTIVE 

CASEOFF              DIRECTIVE 

CASEON               DIRECTIVE 

CFI                  DIRECTIVE 

CODE                 SEGMENT TYPE 

CODE                 DIRECTIVE 

CODE16               DIRECTIVE 

CODE32               DIRECTIVE 

COL                  DIRECTIVE 

CONST                SEGMENT TYPE 

CTRL_FPU_INIT_VAL    #define, value: TFPU_MODE_Msk, line:      50:1  

CoreDebug_BASE       #define, value: (0xE000EDF0UL), line:     166:1  

D0                   REGISTER 

D1                   REGISTER 

D10                  REGISTER 

D11                  REGISTER 

D12                  REGISTER 

D13                  REGISTER 

D14                  REGISTER 

D15                  REGISTER 

D2                   REGISTER 

D3                   REGISTER 

D4                   REGISTER 

D5                   REGISTER 

D6                   REGISTER 

D7                   REGISTER 

D8                   REGISTER 

D9                   REGISTER 

DATA                 SEGMENT TYPE 

DATA                 DIRECTIVE 

DATE                 OPERATOR 

DC16                 DIRECTIVE 

DC24                 DIRECTIVE 

DC32                 DIRECTIVE 

DC8                  DIRECTIVE 
                               - task_sheduler -                      Page   22


DCB                  DIRECTIVE 

DCD                  DIRECTIVE 

DCREL32              DIRECTIVE 

DCW                  DIRECTIVE 

DEFINE               DIRECTIVE 

DF32                 DIRECTIVE 

DF64                 DIRECTIVE 

DS16                 DIRECTIVE 

DS24                 DIRECTIVE 

DS32                 DIRECTIVE 

DS8                  DIRECTIVE 

ELSE                 DIRECTIVE 

ELSEIF               DIRECTIVE 

END                  DIRECTIVE 

ENDIF                DIRECTIVE 

ENDM                 DIRECTIVE 

ENDMOD               DIRECTIVE 

ENDR                 DIRECTIVE 

EQU                  DIRECTIVE 

ERR_EXC_RET          #define, value: 1, line:     195:1  

ERR_LO_PSP_LIM       #define, value: 4, line:     198:1  

ERR_UP_PSP_LIM       #define, value: 2, line:     197:1  

EVEN                 DIRECTIVE 

EXC_RET_BASE         #define, value: 0xFFFFFFE1, line:      91:1  

EXC_RET_HALDLER      #define, value: 0, line:     100:1  

EXC_RET_HALDLER_MSP  #define, value: 0xFFFFFFF1, line:      93:1  

EXC_RET_MSP          #define, value: 0, line:      97:1  

EXC_RET_NOFPU        #define, value: 16, line:     103:1  

EXC_RET_PSP          #define, value: 4, line:      98:1  

EXC_RET_THREAD       #define, value: 8, line:     101:1  

EXC_RET_THREAD_MSP   #define, value: 0xFFFFFFF9, line:      94:1  

EXC_RET_THREAD_PSP   #define, value: 0xFFFFFFFВ, line:      95:1  

EXC_RET_USEFPU       #define, value: 0, line:     104:1  

EXC_RET_USE_BITMSK   #define, value: 0x1F, line:      89:1  

EXITM                DIRECTIVE 

EXPORT               DIRECTIVE 

EXTERN               DIRECTIVE 

EXTWEAK              DIRECTIVE 

FAR                  SEGMENT TYPE 
                               - task_sheduler -                      Page   23


FARCODE              SEGMENT TYPE 

FARCONST             SEGMENT TYPE 

FARDATA              SEGMENT TYPE 

FPEXC                REGISTER 

FPINST               REGISTER 

FPINST2              REGISTER 

FPSCR                REGISTER 

FPSID                REGISTER 

FUNCALL              DIRECTIVE 

FUNCTION             DIRECTIVE 

HIGH                 OPERATOR 

HUGE                 SEGMENT TYPE 

HUGECODE             SEGMENT TYPE 

HUGECONST            SEGMENT TYPE 

HUGEDATA             SEGMENT TYPE 

HWRD                 OPERATOR 

IDATA                SEGMENT TYPE 

IF                   DIRECTIVE 

IMPORT               DIRECTIVE 

INCLUDE              DIRECTIVE 

INFINITE             #define, value: (0xFFFFFFFFUL), line:     203:1        284

ITM_BASE             #define, value: (0xE0000000UL), line:     165:1  

LIBRARY              DIRECTIVE 

LOCAL                DIRECTIVE 

LOCFRAME             DIRECTIVE 

LOW                  OPERATOR 

LR                   REGISTER 

LSL                  MNEMONIC 

LSR                  MNEMONIC 

LSTCND               DIRECTIVE 

LSTCOD               DIRECTIVE 

LSTEXP               DIRECTIVE 

LSTMAC               DIRECTIVE 

LSTOUT               DIRECTIVE 

LSTPAG               DIRECTIVE 

LSTREP               DIRECTIVE 

LSTXRF               DIRECTIVE 

LTORG                DIRECTIVE 

LWRD                 OPERATOR 
                               - task_sheduler -                      Page   24


MACRO                DIRECTIVE 

MODULE               DIRECTIVE 

MVFR0                REGISTER 

MVFR1                REGISTER 

NAME                 DIRECTIVE 

NEAR                 SEGMENT TYPE 

NEARCODE             SEGMENT TYPE 

NEARCONST            SEGMENT TYPE 

NEARDATA             SEGMENT TYPE 

NOALLOC              SEGMENT TYPE 

NOCALL               DIRECTIVE 

NOROOT               SEGMENT TYPE 

NPAGE                SEGMENT TYPE 

NVIC_BASE            #define, value: (SCS_BASE + 0x0100UL), line:     168:1  

NVIC_BASE_ADR        #define, value: 0xE000E100, line:     114:1  

ODD                  DIRECTIVE 

P0                   REGISTER 

P1                   REGISTER 

P10                  REGISTER 

P11                  REGISTER 

P12                  REGISTER 

P13                  REGISTER 

P14                  REGISTER 

P15                  REGISTER 

P2                   REGISTER 

P3                   REGISTER 

P4                   REGISTER 

P5                   REGISTER 

P6                   REGISTER 

P7                   REGISTER 

P8                   REGISTER 

P9                   REGISTER 

PAGE                 DIRECTIVE 

PAGSIZ               DIRECTIVE 

PC                   REGISTER 

PRESERVE8            DIRECTIVE 

PROGRAM              DIRECTIVE 

PUBLIC               DIRECTIVE 

PUBWEAK              DIRECTIVE 
                               - task_sheduler -                      Page   25


R0                   REGISTER 

R1                   REGISTER 

R10                  REGISTER 

R11                  REGISTER 

R12                  REGISTER 

R13                  REGISTER 

R14                  REGISTER 

R15                  REGISTER 

R2                   REGISTER 

R3                   REGISTER 

R4                   REGISTER 

R5                   REGISTER 

R6                   REGISTER 

R7                   REGISTER 

R8                   REGISTER 

R9                   REGISTER 

RADIX                DIRECTIVE 

RCC_APB1PeriphClockCmd Target symbol: 0 

RCC_APB1Periph_TIM2  Target symbol: 0 

REGISTER             SEGMENT TYPE 

RELOC_ARM_PREL31     OPERATOR 

RELOC_ARM_TARGET1    OPERATOR 

RELOC_ARM_TARGET2    OPERATOR 

RELOC_LOCAL          OPERATOR 

REORDER              SEGMENT TYPE 

REPT                 DIRECTIVE 

REPTC                DIRECTIVE 

REPTI                DIRECTIVE 

REQUIRE              DIRECTIVE 

REQUIRE8             DIRECTIVE 

ROOT                 SEGMENT TYPE 

ROR                  MNEMONIC 

RRX                  MNEMONIC 

RSEG                 DIRECTIVE 

RTMODEL              DIRECTIVE 

S0                   REGISTER 

S1                   REGISTER 

S10                  REGISTER 

S11                  REGISTER 
                               - task_sheduler -                      Page   26


S12                  REGISTER 

S13                  REGISTER 

S14                  REGISTER 

S15                  REGISTER 

S16                  REGISTER 

S17                  REGISTER 

S18                  REGISTER 

S19                  REGISTER 

S2                   REGISTER 

S20                  REGISTER 

S21                  REGISTER 

S22                  REGISTER 

S23                  REGISTER 

S24                  REGISTER 

S25                  REGISTER 

S26                  REGISTER 

S27                  REGISTER 

S28                  REGISTER 

S29                  REGISTER 

S3                   REGISTER 

S30                  REGISTER 

S31                  REGISTER 

S4                   REGISTER 

S5                   REGISTER 

S6                   REGISTER 

S7                   REGISTER 

S8                   REGISTER 

S9                   REGISTER 

SBREL                OPERATOR 

SCB_BASE             #define, value: (SCS_BASE + 0x0D00UL), line:     169:1        327

SCB_CCR_REG          #define, value: 0xE000ED14, line:     179:1        117

SCB_ICSR_OFFSET      #define, value: 0x004, line:     187:1        327

SCB_ICSR_PENDSVCLR_BitPos #define, value: 27, line:     192:1  

SCB_ICSR_PENDSVCLR_MskVal #define, value: (1UL << SCB_ICSR_PENDSVCLR_BitPos), line:     193:1  

SCB_ICSR_PENDSVSET_BitPos #define, value: 28, line:     189:1        329

SCB_ICSR_PENDSVSET_MskVal #define, value: (1UL << SCB_ICSR_PENDSVSET_BitPos), line:     190:1        329

SCB_SHCSR_SVCALLPENDED_BitPos #define, value: 15, line:     184:1  

SCB_SHCSR_SVCALLPENDED_MskVal #define, value: (1UL << SCB_SHCSR_SVCALLPENDED_BitPos), line:     185:1  

SCS_BASE             #define, value: (0xE000E000UL), line:     164:1        327
                               - task_sheduler -                      Page   27


SECTION              DIRECTIVE 

SECTION_GROUP        DIRECTIVE 

SECTION_LINK         DIRECTIVE 

SECTION_TYPE         DIRECTIVE 

SET                  DIRECTIVE 

SETA                 DIRECTIVE 

SFB                  OPERATOR 

SFE                  OPERATOR 

SFS                  OPERATOR 

SHCSR_OFFSET         #define, value: 0x24, line:     176:1  

SHPR2_OFFSET         #define, value: 0x1C, line:     173:1  

SHPR_OFFSET          #define, value: 0x18, line:     172:1  

SIZEOF               OPERATOR 

SORT                 SEGMENT TYPE 

SP                   REGISTER 

STKALIGN_VAL         #define, value: 0x200, line:     182:1  

SysTick_BASE         #define, value: (SCS_BASE + 0x0010UL), line:     167:1  

TABLE                DIRECTIVE 

TCRITSECT_BIT_Pos    #define, value: 8, line:      40:1        324

TCRITSECT_Msk        #define, value: (1UL << TCRITSECT_BIT_Pos), line:      41:1        324

TFPU_MODE_BIT_Pos    #define, value: 2, line:      34:1        110      245

TFPU_MODE_Msk        #define, value: (1UL << TFPU_MODE_BIT_Pos), line:      35:1        110      245

THUMB                DIRECTIVE 

THUMBX               DIRECTIVE 

TIM2                 Target symbol: 0 

TIM2_IRQn            Target symbol: 0 

TIMx_DIER_OFFSET     #define, value: 0x0C, line:     112:1  

TIMx_SR_OFFSET       #define, value: 0x10, line:     111:1        267

TM_CREATE_SUSPENDED  #define, value: TSUSPENDED_Msk, line:      72:1        348

TM_FPU               #define, value: TFPU_MODE_Msk, line:      70:1        110      245

TM_MSP               #define, value: 0, line:      55:1  

TM_NFPU              #define, value: 0, line:      69:1  

TM_NPRIV             #define, value: TPRIV_Msk, line:      53:1        156

TM_PRIV              #define, value: 0, line:      52:1  

TM_PSP               #define, value: TSTACK_MODE_Msk, line:      56:1  

TM_SET_STACK_SIZE    #define, value: TSTACKSIZE_Msk, line:      73:1  

TPENDSV_IT_PRIO      #define, value: 15, line:      25:1  

TPRIO_BIT_Pos        #define, value: 3, line:      37:1  

TPRIO_Msk            #define, value: (31UL << TPRIO_BIT_Pos), line:      38:1  
                               - task_sheduler -                      Page   28


TPRIV_BIT_Pos        #define, value: 0, line:      28:1        156

TPRIV_Msk            #define, value: (1UL << TPRIV_BIT_Pos), line:      29:1        156

TSTACKSIZE_BIT_Pos   #define, value: 10, line:      46:1  

TSTACKSIZE_Msk       #define, value: (1UL << TSTACKSIZE_BIT_Pos), line:      47:1  

TSTACK_MODE_BIT_Pos  #define, value: 1, line:      31:1  

TSTACK_MODE_Msk      #define, value: (1UL << TSTACK_MODE_BIT_Pos), line:      32:1  

TSUSPENDED_BIT_Pos   #define, value: 9, line:      43:1        348

TSUSPENDED_Msk       #define, value: (1UL << TSUSPENDED_BIT_Pos), line:      44:1        348

TSVCALL_IT_PRIO      #define, value: 13, line:      24:1  

TSV_TIMER            #define, value: TIM2, line:     108:1  

TSV_TIMER_APBPeriph  #define, value: RCC_APB1Periph_TIM2, line:     122:1  

TSV_TIMER_ARR_1MS    #define, value: ((uint16_t)42000), line:     124:1  

TSV_TIMER_BASE_ADR   #define, value: 0x40000000, line:     109:1        267

TSV_TIMER_IRQ        #define, value: TIM2_IRQn, line:     126:1  

TSV_TIMER_IRQ_HNDLR  #define, value: TIM2_IRQHandler, line:     127:1         33      263

TSV_TIMER_PSC_1MS    #define, value: ((uint16_t)2), line:     123:1  

TSV_TIMER_RCC_APBCmd #define, value: RCC_APB1PeriphClockCmd, line:     121:1  

TSV_TIM_NVIC_BIT     #define, value: 29, line:     118:1  

TSV_TIM_NVIC_ICER_OFS #define, value: 0x080, line:     117:1  

TSV_TIM_NVIC_ISER_OFS #define, value: 0, line:     116:1  

TSW_TIME_MS          #define, value: 1, line:      22:1  

TSW_TIMx_CYCLES      #define, value: 5, line:      20:1         76      310

TTIMER_IT_PRIO       #define, value: 13, line:      23:1  

TY_EVENT             #define, value: 3, line:     161:1  

TY_MUTEX             #define, value: 2, line:     160:1  

TY_SEMAPHORE         #define, value: 1, line:     159:1  

TY_THREAD            #define, value: 0, line:     158:1  

UGT                  OPERATOR 

ULT                  OPERATOR 

UNTYPED              SEGMENT TYPE 

VAR                  DIRECTIVE 

XDATA                SEGMENT TYPE 

XOR                  OPERATOR 

ZPAGE                SEGMENT TYPE 

[                    DELIMITER 

]                    DELIMITER 

^                    OPERATOR 

^                    DELIMITER 

_OCORE_SIZE          #define, value: 16, line:     139:1        100      105      109      136
                               - task_sheduler -                      Page   29

                                                                      148      155      236      240
                                                                      283      289      323

__ARM4TM__           #define, value: 4, line:         0  

__ARM5TM__           #define, value: 5, line:         0  

__ARM5T__            #define, value: 5, line:         0  

__ARM5__             #define, value: 5, line:         0  

__ARM6MEDIA__        #define, value: 6, line:         0  

__ARM6M__            #define, value: 11, line:         0  

__ARM6SM__           #define, value: 12, line:         0  

__ARM6T2__           #define, value: 6, line:         0  

__ARM6__             #define, value: 6, line:         0  

__ARM7EM__           #define, value: 13, line:         0  

__ARM7__             #define, value: 7, line:         0  

__ARMVFPV1__         #define, value: 1, line:         0  

__ARMVFPV2__         #define, value: 2, line:         0  

__ARMVFPV3_D16__     #define, value: 1, line:         0  

__ARMVFPV3_FP16__    #define, value: 1, line:         0  

__ARMVFPV3__         #define, value: 3, line:         0  

__ARMVFPV4__         #define, value: 4, line:         0  

__ARMVFP_D16__       #define, value: 1, line:         0  

__ARMVFP_FP16__      #define, value: 1, line:         0  

__ARMVFP_SP__        #define, value: 1, line:         0  

__ARMVFP__           #define, value: __ARMVFPV4__, line:         0  

__ARM_MEDIA__        #define, value: 1, line:         0  

__ARM_PROFILE_M__    #define, value: 1, line:         0  

__BUILD_NUMBER__     #define,            line:         0  

__CORE__             #define, value: __ARM7EM__, line:         0  

__DATE__             #define,            line:         0  

__FILE__             #define,            line:         0  

__IAR_SYSTEMS_ASM    #define,            line:         0  

__IAR_SYSTEMS_ASM__  #define,            line:         0  

__IASMARM__          #define, value: 1, line:         0  

__LINE__             #define,            line:         0  

__LITTLE_ENDIAN__    #define, value: 1, line:         0  

__SUBVERSION__       #define,            line:         0  

__THREADS_DEF_H      #define, value: , line:      13:1  

__TID__              #define,            line:         0  

__TIME__             #define,            line:         0  

__VER__              #define,            line:         0  

define               PREPROCESSOR DIRECTIVE 
                               - task_sheduler -                      Page   30


defined              Target symbol: 0 

elif                 PREPROCESSOR DIRECTIVE 

else                 PREPROCESSOR DIRECTIVE 

endif                PREPROCESSOR DIRECTIVE 

error                PREPROCESSOR DIRECTIVE 

if                   PREPROCESSOR DIRECTIVE 

ifdef                PREPROCESSOR DIRECTIVE 

ifndef               PREPROCESSOR DIRECTIVE 

include              PREPROCESSOR DIRECTIVE 

line                 PREPROCESSOR DIRECTIVE 

message              PREPROCESSOR DIRECTIVE 

offs_flags           #define, value: 2, line:     143:1  

offs_id              #define, value: (4+_OCORE_SIZE), line:     149:1  

offs_mode            #define, value: (0+_OCORE_SIZE), line:     148:1        109      155      240      323

offs_next            #define, value: 12, line:     146:1        292

offs_prev            #define, value: 8, line:     145:1  

offs_sleep_ms        #define, value: (20+_OCORE_SIZE), line:     155:1        283      289

offs_sync            #define, value: 4, line:     144:1  

offs_tstaRAM         #define, value: (12+_OCORE_SIZE), line:     152:1  

offs_tstack          #define, value: (8+_OCORE_SIZE), line:     151:1        100      105      136      148
                                                                      236

offs_tstsize         #define, value: (16+_OCORE_SIZE), line:     153:1  

offs_ty              #define, value: 0, line:     142:1  

pragma               PREPROCESSOR DIRECTIVE 

st_LR                #define, value: 20, line:     132:1  

st_PC                #define, value: 24, line:     131:1  

st_PSR               #define, value: 28, line:     130:1  

st_R0                #define, value: 0, line:     137:1  

st_R1                #define, value: 4, line:     136:1  

st_R12               #define, value: 16, line:     133:1  

st_R2                #define, value: 8, line:     135:1  

st_R3                #define, value: 12, line:     134:1  

uint16_t             Target symbol: 0 

undef                PREPROCESSOR DIRECTIVE 

{                    DELIMITER 

|                    OPERATOR 

||                   OPERATOR 

}                    DELIMITER 

~                    OPERATOR 

                               - task_sheduler -                      Page   31



Segment             Type 	Mode

----------------------------------------

.text               CODE  	REL 

TASK_S              DATA  	REL 

__EXTERNS           CODE  	ABS Org:0 



Label               Mode   Type                   Segment    Value/Offset

------------------------------------------------------------------------------

??DUMMY_SYMBOL_IN_BACKEND_PARSED_OPERANDS
                    ABS    CONST UNTYP.           ASEG       1267 

DeleteThread        REL    CONST PUB UNTYP.       .text      89 

EnterCriticalSectionREL    CONST PUB UNTYP.       .text      91 

ExitThread          REL    CONST PUB UNTYP.       .text      1B7 

GetThreadHandle     REL    CONST PUB UNTYP.       .text      1AB 

GetThreadId         REL    CONST PUB UNTYP.       .text      1A5 

HardFault_Handler   ABS    CONST EXT [-001] UNTYP. __EXTERNS  Solved Extern 

InitSheduler        ABS    CONST EXT [004] UNTYP. __EXTERNS  Solved Extern 

LSCAN2_LEDToggle    ABS    CONST EXT [-001] UNTYP. __EXTERNS  Solved Extern 

LeaveCriticalSectionREL    CONST PUB UNTYP.       .text      97 

Reset_Handler       REL    CONST PUB UNTYP.       .text      1 

ResumeThread        REL    CONST PUB UNTYP.       .text      195 

SetThreadPriority   REL    CONST PUB UNTYP.       .text      8D 

SuspendThread       REL    CONST PUB UNTYP.       .text      19B 

SystemInit          ABS    CONST EXT [003] UNTYP. __EXTERNS  Solved Extern 

SystemTicks         REL    CONST PUB UNTYP.       TASK_S     10 

TID                 ABS    CONST UNTYP.           ASEG       4F00 

TIM2_IRQHandler     REL    CONST PUB UNTYP.       .text      10F 

_?0                 REL    CONST UNTYP.           .text      1BC 

_?1                 REL    CONST UNTYP.           .text      1C0 

_?10                REL    CONST UNTYP.           .text      1E4 

_?11                REL    CONST UNTYP.           .text      1E8 

_?12                REL    CONST UNTYP.           .text      1EC 

_?13                REL    CONST UNTYP.           .text      1F0 

_?14                REL    CONST UNTYP.           .text      1F4 

_?2                 REL    CONST UNTYP.           .text      1C4 

_?3                 REL    CONST UNTYP.           .text      1C8 

_?4                 REL    CONST UNTYP.           .text      1CC 

_?5                 REL    CONST UNTYP.           .text      1D0 

_?6                 REL    CONST UNTYP.           .text      1D4 
                               - task_sheduler -                      Page   32


_?7                 REL    CONST UNTYP.           .text      1D8 

_?8                 REL    CONST UNTYP.           .text      1DC 

_?9                 REL    CONST UNTYP.           .text      1E0 

__SVC_sw_thread     ABS    CONST EXT [-001] UNTYP. __EXTERNS  Solved Extern 

__iar_data_init3    ABS    CONST EXT [002] UNTYP. __EXTERNS  Solved Extern 

__iar_init_vfp      ABS    CONST EXT [000] UNTYP. __EXTERNS  Solved Extern 

__iar_program_start ABS    CONST EXT [-001] UNTYP. __EXTERNS  Solved Extern 

__low_level_init    ABS    CONST EXT [001] UNTYP. __EXTERNS  Solved Extern 

__vector_table      ABS    CONST EXT [-001] UNTYP. __EXTERNS  Solved Extern 

_ccyc_              REL    CONST UNTYP.           TASK_S     18 

_init_root_         REL    CONST UNTYP.           .text      B9 

_pend_              REL    CONST PUB UNTYP.       TASK_S     8 

_proot_             REL    CONST PUB UNTYP.       TASK_S     4 

call_add_core_obj   REL    CONST PUB UNTYP.       .text      1B1 

call_set_sleep      REL    CONST PUB UNTYP.       .text      18F 

call_set_suspend    REL    CONST PUB UNTYP.       .text      19F 

call_set_thread_prioREL    CONST UNTYP.           .text      8D 

ccfree              ABS    CONST EXT [-001] UNTYP. __EXTERNS  Solved Extern 

dbg_error_led       ABS    CONST EXT [-001] UNTYP. __EXTERNS  Solved Extern 

init_sheduler       REL    CONST UNTYP.           .text      AD 

led_loop            ABS    CONST EXT [-001] UNTYP. __EXTERNS  Solved Extern 

main                ABS    CONST EXT [005] UNTYP. __EXTERNS  Solved Extern 

pctcon              REL    CONST PUB UNTYP.       TASK_S     C 

reallocPSP          REL    CONST UNTYP.           .text      CD 

ret_svc_new_thrd    REL    CONST UNTYP.           .text      83 

set_current_ctx     REL    CONST UNTYP.           .text      F3 

snt_push8regs       REL    CONST UNTYP.           .text      3B 

snt_rest_stack      REL    CONST UNTYP.           .text      6B 

snt_set_pctx        REL    CONST UNTYP.           .text      1D 

start_svc           ABS    CONST EXT [006] UNTYP. __EXTERNS  Solved Extern 

svc_new_thrd        REL    CONST PUB UNTYP.       .text      B 

tfunc_wrapper       REL    CONST UNTYP.           .text      9D 

topMSP              REL    CONST PUB UNTYP.       TASK_S     0 

tswFLdis0           REL    CONST PUB UNTYP.       TASK_S     14 

ttt_chdis0          REL    CONST UNTYP.           .text      143 

ttt_ld_next         REL    CONST UNTYP.           .text      13F 

ttt_loop_search     REL    CONST UNTYP.           .text      12B 

ttt_ret             REL    CONST UNTYP.           .text      18D 

twrap_del           REL    CONST UNTYP.           .text      9F 
                               - task_sheduler -                      Page   33


twrap_wfi           REL    CONST UNTYP.           .text      A9 





##############################
#           CRC:0            #
#        Errors:   0         #
#        Warnings: 0         #
#         Bytes: 530         #
##############################



