                                   - pendsv -                         Page    1

###############################################################################
#                                                                             #
#     IAR Assembler V7.50.2.10312/W32 for ARM 25/Aug/2022  15:50:57           #
#     Copyright 1999-2015 IAR Systems AB.                                     #
#                                                                             #
#           Source file   =  E:\STM32\LScan2\OS\pendsv.s                      #
#           List file     =  E:\STM32\LScan2\Debug\List\pendsv.lst            #
#           Object file   =  E:\STM32\LScan2\Debug\Obj\pendsv.o               #
#           Command line  =  E:\STM32\LScan2\OS\pendsv.s                      #
#                            -OE:\STM32\LScan2\Debug\Obj -s+ -M<> -w+ -r      #
#                            -LE:\STM32\LScan2\Debug\List -cM -i -B -p80 -t8  #
#                            -xDI2 --cpu Cortex-M4 --fpu VFPv4_sp -n          #
#                                                                             #
###############################################################################

    1                           /*============================================
                                ==================================

    2                                                       pendsv

    3                                                   @dem1305 15.04.2017

    4                           ==============================================
                                ================================*/

    5                           #include "core_def.h"

    1                           /**

    2                             Laser project by dem1305

    3                           

    4                             @2017

    5                             

    6                             файл определений данных и констант
                                 

    7                           */

    8                           //--------------------------------------------
                                --------------------------------//

    9                           

   10                           

   11                           #ifndef __CORE_DEF_H

   12                           #define __CORE_DEF_H

   13                           //--------------------------------------------
                                --------------------------------//

   14                           //если определен ENABLE_MULTITHREADING=1 -
                                 включить многопоточный режим

   15                           #define ENABLE_USE_FPU                1
                                 //использование сопроцессора

   16                           #define ENABLE_MULTITHREADING        
                                 1

   17                           #define DISABLE_MCU_BUFFERING_MODE    0
                                 //отключить буферизацию(эскалация отказов)

   18                           #define CORE_MPU_PROTECTION           0 //1
                                 //использовать MPU для защиты памяти контекста
                                 потока (DEBUG MODE)

   19                             

   20                           #define MAX_MSP_STACK_TOP         0x200FFFFF//
                                верхняя граница

   21                           #define DEFAULT_TSTACK_SIZE       0x1000     
                                   - pendsv -                         Page    2

                                 //4096 Стек операционной системы

   22                           

   23                           

   24                           #define ENABLE_STACK_CHECK_DEBUG  0 //1
                                 //необходимо для отладки ОС

   25                           #define CORE_DBG_OPERATION        0 //1
                                 //необходимо для отладки ОС,запись последней
                                 операции

   26                           #define CORE_DBG_LEN              8

   27                           //--------------------------------------------
                                --------------------------------//

   28                           /*

   29                           группировка приоритетов прерываний.

   30                           Прерывания для переключения контекстов требуют
                                 низшего приоритета для исключения 

   31                           перекрытия других прерываний и невозможности
                                 подмены EX_RETURN .

   32                           */

   33                           #define CORE_NVIC_PriorityGroup        
                                 NVIC_PriorityGroup_2    // !!! ЭТО ПОЛНОЕ
                                 ЗНАЧЕНИЕ ПОЛЯ PRIGROUP для OR-операции биты
                                 8-10 SCB->AIRCR [0-3] приоритет:[0-3]подприори
                                тет

   34                           #define CORE_IT_PRIO_GROUP              3     
                                                  //приоритет группы прерываний

   35                           //--------------------------------------------
                                --------------------------------//

   36                           /*

   37                           переключение потоков происходит по истечении
                                 TSV_TIMx_CYCLES циклов 

   38                           таймера , прерывания которого следуют с
                                 интервалом TSV_TIME_MS :

   39                           TSV_TIMx_CYCLES * TSV_TIME_MS = квант времени
                                 одного контекста 

   40                           */

   41                            

   42                           #define TSV_TIMx_CYCLES       5          
                                 //количество интервалов таймера для переключен
                                ия

   43                           

   44                           #define TSV_TIME_MS           1          
                                 //интервал таймера переключения контекстов

   45                           //группа прерываний ядра,приоритет группы

   46                           #define TTIMER_IT_PRIO        CORE_IT_PRIO_GRO
                                UP  //приоритет системного таймера сервисов

   47                           #define TSVCALL_IT_PRIO       CORE_IT_PRIO_GRO
                                UP  //приоритет прерываний SVCall

   48                           #define TPENDSV_IT_PRIO       CORE_IT_PRIO_GRO
                                UP  //приоритет прерываний PendSV (самый
                                 низкий)

                                   - pendsv -                         Page    3

   49                           

   50                           //приоритет выбора обработчика в группе при
                                 одновременных прерываниях

   51                           #define TTIMER_IT_PRIO_SUB        1     
                                 //подприоритет системного таймера сервисов

   52                           #define TSVCALL_IT_PRIO_SUB       0     
                                 //подприоритет прерываний SVCall

   53                           #define TPENDSV_IT_PRIO_SUB       2     
                                 //подприоритет прерываний PendSV (самый
                                 низкий)

   54                           

   55                           //--------------------------------------------
                                --------------------------------//

   56                           // MODE MASK

   57                           #define TPRIV_BIT_Pos       0

   58                           #define TPRIV_Msk           (1UL << TPRIV_BIT_
                                Pos)

   59                           

   60                           #define TSTACK_MODE_BIT_Pos 1

   61                           #define TSTACK_MODE_Msk     (1UL << TSTACK_MOD
                                E_BIT_Pos)

   62                           

   63                           #define TFPU_MODE_BIT_Pos   2

   64                           #define TFPU_MODE_Msk       (1UL << TFPU_MODE_
                                BIT_Pos)

   65                           

   66                           #define TPRIO_BIT_Pos       3

   67                           #define TPRIO_Msk           (31UL <<
                                 TPRIO_BIT_Pos)

   68                           

   69                           #define TCRITSECT_BIT_Pos   8

   70                           #define TCRITSECT_Msk       (1UL << TCRITSECT_
                                BIT_Pos)

   71                           

   72                           #define TSUSPENDED_BIT_Pos  9

   73                           #define TSUSPENDED_Msk      (1UL << TSUSPENDED
                                _BIT_Pos)

   74                           

   75                           #define TSTACKSIZE_BIT_Pos  10

   76                           #define TSTACKSIZE_Msk      (1UL << TSTACKSIZE
                                _BIT_Pos)

   77                           

   78                           //     ************

   79                           #define TMMRAM_CTX_BIT_Pos  11   //   0x800 ==
                                 2048==не использовать память CCM_RAM для
                                 контекста

   80                           #define TMMRAM_CTX_Msk      (1UL << TMMRAM_CTX
                                   - pendsv -                         Page    4

                                _BIT_Pos)

   81                           

   82                           #define TMMRAM_STACK_BIT_Pos 12   //   0x1000
                                 == 4096==не использовать память CCM_RAM для
                                 стека

   83                           #define TMMRAM_STACK_Msk     (1UL <<
                                 TMMRAM_STACK_BIT_Pos)

   84                           //     ************

   85                           

   86                           //----------режимы----------

   87                           #define TM_PRIV             0              
                                 //привилегированный

   88                           #define TM_NPRIV            TPRIV_Msk      
                                 //непривилегированный

   89                           

   90                           #define TM_MSP              0              
                                 //используется MSP

   91                           #define TM_PSP              TSTACK_MODE_Msk
                                 //используется PSP

   92                           

   93                           /*

   94                           сохранять контекст FPU в стеке PSP потока
                                 (1=нет)

   95                           CONTROL register bit 2 = FPCA: Indicates
                                 whether floating-point context currently
                                 active:

   96                           0: No floating-point context active

   97                           1: Floating-point context active.

   98                           */

   99                           #define TM_NFPU             0

  100                           #define TM_FPU              TFPU_MODE_Msk

  101                           

  102                           #define TM_CREATE_SUSPENDED TSUSPENDED_Msk 
                                 //приостановлен

  103                           #define TM_SET_STACK_SIZE   TSTACKSIZE_Msk 
                                 //при создании потока задать размер стека

  104                           /* ===========================================
                                ===========================

  105                                 CONTROL register

  106                                 доступ только в привелигированном
                                 режиме

  107                                 использовать команды MSR, MRS .

  108                                 имена битов:

  109                           

  110                           #define CTRL_PRIV    0x00000000 //бит 0
                                 привилегированный режим Thread Mode

  111                           #define CTRL_NPRIV   0x00000001 //бит 0 не
                                   - pendsv -                         Page    5

                                 привилегированный режим Thread Mode

  112                           

  113                           #define CTRL_MSPSEL  0x00000000 //бит 1 выбор
                                 стека для Handler Mode (0: MSP, 1: PSP)

  114                           #define CTRL_PSPSEL  0x00000002 //бит 1 выбор
                                 стека для Handler Mode (0: MSP, 1: PSP)

  115                           

  116                           #define CTRL_FPSP    0x00000004 //сохранять ли
                                 контекст FPU в стеке

  117                           */

  118                           //EXC_RETURN

  119                           #define EXC_RET_USE_BITMSK  0x1F      
                                 //исполльзуемые биты

  120                           

  121                           #define EXC_RET_BASE        0xFFFFFFE1

  122                           

  123                           #define EXC_RET_HALDLER_MSP 0xFFFFFFF1
                                 //возврат в режим обработчика c использованием
                                 MSP[0001]

  124                           #define EXC_RET_THREAD_MSP  0xFFFFFFF9
                                 //возврат в режим потока c использованием
                                 MSP[1001]

  125                           #define EXC_RET_THREAD_PSP  0xFFFFFFFB
                                 //возврат в режим потока c использованием
                                 PSP[1011]

  126                           //-----битовые значения возврата------

  127                           #define EXC_RET_MSP     0   //возврат с
                                 использованием стека MSP

  128                           #define EXC_RET_PSP     4   //возврат с
                                 использованием стека PSP

  129                           

  130                           #define EXC_RET_HALDLER 0   //возврат в режим
                                 обработчика

  131                           #define EXC_RET_THREAD  8   //возврат в режим
                                 потока

  132                           //значение бита использования FPU при возврате
                                 (стек тот же,что у потока)

  133                           #define EXC_RET_NOFPU   16

  134                           #define EXC_RET_USEFPU  0

  135                           

  136                           

  137                           //--------------------------------------------
                                --------------------------------//

  138                           #define TSV_TIMER             TIM2            
                                      //таймер планировщика

  139                           #define TSV_TIMER_BASE_ADR    0x40000000      
                                      //TIM2 BASE

  140                           

                                   - pendsv -                         Page    6

  141                           #define TIMx_SR_OFFSET        0x10            
                                      //TIM SR register offset

  142                           #define TIMx_DIER_OFFSET      0x0C            
                                      //TIM DIER register offset

  143                           

  144                           #define NVIC_BASE_ADR         0xE000E100  //!<
                                 NVIC Base Address                  */

  145                           

  146                           #define TSV_TIM_NVIC_ISER_OFS 0     
                                 //смещение регистра разреш.прерывания
                                 таймера

  147                           #define TSV_TIM_NVIC_ICER_OFS 0x080 
                                 //смещение регистра запрета прерывания
                                 таймера

  148                           #define TSV_TIM_NVIC_BIT      29     //бит для
                                 разрешения/запрета прерывания= 1<<(irq&1F)

  149                           //#define TSV_TIM_NVIC_BIT_VAL  (1UL<<TSV_TIM_
                                NVIC_BIT)     

  150                           

  151                           #define TSV_TIMER_RCC_APBCmd  RCC_APB1PeriphCl
                                ockCmd

  152                           #define TSV_TIMER_APBPeriph   RCC_APB1Periph_T
                                IM2

  153                           #define TSV_TIMER_PSC_1MS     ((uint16_t)2)

  154                           #define TSV_TIMER_ARR_1MS     ((uint16_t)42000
                                )

  155                           

  156                           #define TSV_TIMER_IRQ         TIM2_IRQn

  157                           #define TSV_TIMER_IRQ_HNDLR   TIM2_IRQHandler

  158                           //--------------------------------------------
                                --------------------------------//

  159                           //-------смещения в стеке (PSR PC LR R12 R3 R2
                                 R1 R0) -------

  160                           #define st_PSR  28    

  161                           #define st_PC   24

  162                           #define st_LR   20

  163                           #define st_R12  16

  164                           #define st_R3   12

  165                           #define st_R2   8

  166                           #define st_R1   4

  167                           #define st_R0   0

  168                           //--------------------------------------------
                                --------------------------------//

  169                           #define _OCORE_SIZE   16    //размер структуры
                                 объекта ядра,в байтах (threads.h)

  170                           //--------thread struct offset vals--------

  171                           //--------структура coreobj------->>

                                   - pendsv -                         Page    7

  172                           #define offs_ty       0     //16 бит
                                 тип

  173                           #define offs_flags    2     //16 бит
                                 флаги

  174                           #define offs_sync     4     //корень списка
                                 синхронизации (двунаправленный)

  175                           #define offs_prev     8     //предыдущий
                                 контекст

  176                           #define offs_next     12    //следующий
                                 контекст

  177                           //--------структура coreobj-------<<

  178                           #define offs_mode     (0+_OCORE_SIZE)   
                                 //маска режимов

  179                           #define offs_id       (4+_OCORE_SIZE)   
                                 //идентификатор потока (int,положительное)

  180                           

  181                           #define offs_tstack_PSP   (8+_OCORE_SIZE)   
                                 //текущая вершина стека

  182                           #define offs_tstaRAM_PSP  (12+_OCORE_SIZE)  
                                 //вершина стека

  183                           #define offs_tstsize_PSP  (16+_OCORE_SIZE)  
                                 //размер стека

  184                           //резервные

  185                           #define offs_rsv0         (20+_OCORE_SIZE)  
                                 

  186                           #define offs_rsv1         (24+_OCORE_SIZE)

  187                           #define offs_rsv2         (28+_OCORE_SIZE)

  188                           

  189                           #define offs_wait_ms      (32+_OCORE_SIZE)   
                                 //всего ждать INFINITE=(ULONG)-1 -вечный
                                 сон

  190                           

  191                           #define offs_sync_size    (36+_OCORE_SIZE)   
                                 //количество объектов синхронизации

  192                           

  193                           #define offs_R4_R11_regs  (40+_OCORE_SIZE)   
                                 //остальные регистры процессора

  194                           //--------------------------------------------
                                --------------------------------//

  195                           //типы объектов ядра

  196                           #define TY_THREAD         0

  197                           #define TY_SEMAPHORE      1

  198                           #define TY_MUTEX          2

  199                           #define TY_EVENT          3

  200                           #define TY_SYSTIMER       4

  201                           #define TY_TASK           5

  202                           

                                   - pendsv -                         Page    8

  203                           #define TY_MAX            TY_TASK

  204                           

  205                           #define TY_ANY            0xFFFF //любой
                                 тип

  206                           //--------------------------------------------
                                --------------------------------//

  207                           // CORE OBJECT FLAGS :  флаги объектов ядра
                                 (16 бит)

  208                           #define CF_PASSIVE        0

  209                           #define CF_SIGNAL         1

  210                           

  211                           #define CF_WAIT_ALL       2

  212                           #define CF_WAIT_MULTIPLE  4     

  213                           

  214                           #define CF_AUTORESET      8      //применитель
                                но к event

  215                           

  216                           #define CF_PLAIN          0      //нет
                                 контроля повторного захвата

  217                           #define CF_RECURSIVE      16

  218                           #define CF_TIMED          32

  219                           

  220                           #define CF_CAPTSTATE      0x2000 //в процессе
                                 захвата

  221                           #define CF_ABANDONED      0x4000 //объект
                                 брошен захватившим его потоком (поток
                                 уничтожен)

  222                           #define CF_TIMEOUT        0x8000 //таймаут

  223                           //--------------------------------------------
                                --------------------------------//

  224                           

  225                           #define SCS_BASE            (0xE000E000UL)    
                                                        /*!< System Control
                                 Space Base Address  */

  226                           #define ITM_BASE            (0xE0000000UL)    
                                                        /*!< ITM Base Address  
                                                 */

  227                           #define CoreDebug_BASE      (0xE000EDF0UL)    
                                                        /*!< Core Debug Base
                                 Address            */

  228                           #define SysTick_BASE        (SCS_BASE + 
                                 0x0010UL)                    /*!< SysTick Base
                                 Address               */

  229                           #define NVIC_BASE           (SCS_BASE + 
                                 0x0100UL)                    /*!< NVIC Base
                                 Address                  */

  230                           #define SCB_BASE            (SCS_BASE + 
                                 0x0D00UL)                    /*!< System
                                 Control Block Base Address  */

  231                           
                                   - pendsv -                         Page    9


  232                           //SCS_BASE:

  233                           #define ICTR_OFFSET         0x004     /*!<
                                 Offset: 0x004 (R/ )  uint32_t Interrupt
                                 Controller Type Register     */

  234                           #define ACTLR_OFFSET        0x008     /*!<
                                 Offset: 0x008 (R/W) uint32_t Auxiliary Control
                                 Register              */

  235                           //-------------------------------

  236                           //1=запрет буферизации памяти при отображении
                                 памяти по умолчанию (локализация отказов
                                 шины)

  237                           #define SCnSCB_ACTLR_DISDEFWBUF_BitPos        
                                 1                                   /*!<
                                 ACTLR: DISDEFWBUF Position */

  238                           #define SCnSCB_ACTLR_DISDEFWBUF_MskVal       
                                 (1UL << SCnSCB_ACTLR_DISDEFWBUF_BitPos) /*!<
                                 ACTLR: DISDEFWBUF Mask */

  239                           //1=запрет прерывания многоэлементных
                                 конструкций записи/чтения регистров (LDM/STM)

  240                           #define SCnSCB_ACTLR_DISMCYCINT_BitPos        
                                 0                                   /*!<
                                 ACTLR: DISMCYCINT Position */

  241                           #define SCnSCB_ACTLR_DISMCYCINT_MskVal       
                                 (1UL << SCnSCB_ACTLR_DISMCYCINT_BitPos) /*!<
                                 ACTLR: DISMCYCINT Mask */

  242                           //-------------------------------

  243                           //System handler priority register 

  244                           #define SHPR_OFFSET     0x18

  245                           #define SHPR2_OFFSET    0x1C

  246                           

  247                           //System handler co ntrol an d state register
                                 (SHCSR) , Address offset: 0x24

  248                           #define SHCSR_OFFSET    0x24

  249                           

  250                           //!< Offset: 0x014 (R/W)  Configuration
                                 Control Register  

  251                           #define SCB_CCR_REG     0xE000ED14 //32 bit (2
                                 WORD)

  252                           

  253                           //0-выравнивание стека 4 байт, 1-выравнивание
                                 стека 8 байт , бит 9 PSR - режим выравнивания

  254                           #define STKALIGN_VAL    0x200      //девятый
                                 бит в SBC->CCR   

  255                           

  256                           #define SCB_SHCSR_SVCALLPENDED_BitPos        
                                 15                                            
                                 //< SCB SHCSR: SVCALLPENDED Position
                                 

  257                           #define SCB_SHCSR_SVCALLPENDED_MskVal        
                                 (1UL << SCB_SHCSR_SVCALLPENDED_BitPos)        
                                 //< SCB SHCSR: SVCALLPENDED Mask 

                                   - pendsv -                         Page   10

  258                           //-------------------

  259                           #define SCB_ICSR_OFFSET 0x004 //(R/W) 
                                 Interrupt Control and State Register

  260                           

  261                           #define SCB_ICSR_PENDSVSET_BitPos            
                                 28                                            
                                 /*!< SCB ICSR: PENDSVSET Position */

  262                           #define SCB_ICSR_PENDSVSET_MskVal            
                                 (1UL << SCB_ICSR_PENDSVSET_BitPos)            
                                    /*!< SCB ICSR: PENDSVSET Mask */

  263                           

  264                           #define SCB_ICSR_PENDSVCLR_BitPos            
                                 27                                            
                                 /*!< SCB ICSR: PENDSVCLR Position */

  265                           #define SCB_ICSR_PENDSVCLR_MskVal            
                                 (1UL << SCB_ICSR_PENDSVCLR_BitPos)    
                                 

  266                           //--------------------------------------------
                                --------------------------------//

  267                           #define ERR_EXC_RET         1

  268                           

  269                           #define ERR_STACK_LIM       6   //указатель
                                 вершины стека PSP ниже выделенной области
                                 RAM

  270                           #define ERR_UP_STACK_LIM    2   //указатель
                                 вершины стека PSP выше выделенной области
                                 RAM

  271                           #define ERR_LO_STACK_LIM    4   //указатель
                                 вершины стека PSP ниже выделенной области
                                 RAM

  272                           #define ERR_ZERO_PTR        8   //нулевой
                                 указатель !

  273                           #define ERR_NOT_FOUND       16  //не найдено
                                 !

  274                           #define ERR_OUT_OF_MEMORY   32  //нет
                                 памяти

  275                           #define ERR_IT_STATE        64  //в состоянии
                                 прерывания

  276                           //--------------------------------------------
                                --------------------------------//

  277                           #ifndef INFINITE

  278                           //все определения бесконечности в пределах 32
                                 бит

  279                           #define INFINITE  (0xFFFFFFFFUL) //((ULONG)-1)
                                 4 байта

  280                           #endif

  281                           //--------------------------------------------
                                --------------------------------//

  282                           #define NVIC_INT_CTRL_CONST 0xE000ED04
                                 

  283                           //--------------------------------------------
                                --------------------------------//

                                   - pendsv -                         Page   11

  284                           #endif//__CORE_DEF_H

    6                           

    7                           //System handler priority register 2 (SHPR2)
                                 ==SVcall prio.

    8                           

    9                           

   10                           //--------------------------------------------
                                --------------------------------//

   11                                   MODULE  PENDSVC

   12                                   SECTION OS_CORE:CODE(2)  //align 8
                                 bytes

   13                                   

   14                           #if CORE_DBG_OPERATION==1

   17                           #endif

   18                           //-----------IMPORT---------------------      
                                  

   19                                   EXTERN  HardFault_Handler

   20                                   EXTERN  UsageFault_Handler

   21                                   EXTERN  __vector_table

   22                                   EXTERN  led_loop

   23                                   EXTERN  dbg_error_led

   24                                   EXTERN  LSCAN2_LEDToggle

   25                                   EXTERN  TSV_TIMER_IRQ_HNDLR

   26                                   EXTERN  svc_find_by_handle

   27                                   

   28                                   //--------------------------

   29                                   

   30                                   EXTERN  ccfree //void  ccfree(void*
                                 m)//освобождение памяти

   31                                   

   32                                   EXTERN  _proot_     //root context*

   33                                   EXTERN  _pend_

   34                                   

   35                                   EXTERN  pctcon      //текущий поток   
                                  

   36                                   EXTERN  tswFLdis0

   37                                   //C funcs import

   38                                   EXTERN _check_for_sync

   39                                   EXTERN core_debug

   40                                   

   41                           //-----------EXPORT----------------------     
                                   

   42                                   PUBLIC PendSV_Handler
                                   - pendsv -                         Page   12


   43                                   PUBLIC sub_switch_context_to_R0_

   44                                   PUBLIC select_next_SW_thread

   45                                   PUBLIC sub_retIT_R0_thrd_EX_RETURN

   46                                   PUBLIC _psw_switch_threads_context_to_
                                R0

   47                           //----------------------------------------- 
                                 

   48                                   PUBLIC _pend_thread_ //для принудитель
                                ного переключения

   49                           

   50                           

   51                           //============================================
                                ==========================

   52                                   THUMB //! offset+1 !

   53                           //============================================
                                ========================== 

   54                                   SECTION OS_CORE_DATA:DATA:ROOT(2)   
                                 //ALIGN 4

   55                                   

   56    00000000 00000000      _pend_thread_         DCD   0   //ожидающий
  поток.если не 0,следующий для планировщика.

   57                           //                      DCD   sub_retIT_R0_thr
                                d_EX_RETURN

   58                           //=========================смена потока
                                 ================================ 

   59                                   SECTION OS_CORE:CODE(2) 

   60                                   

   61                           #if CORE_DBG_OPERATION==1

   77                           #else

   78                           _save_op  MACRO _numop_

   79                                     ENDM

   80                           #endif       

   81                           //--------------------------------------------
                                ----------------------------------

   82                           PendSV_Handler:

   83                                   _save_op 46 

   83.1                                   ENDM

   84                                 /*          

   85                                   //в какой режим выход?

   86                                   MOV R3,LR

   87                                   AND R3,R3,#(EXC_RET_BASE|EXC_RET_THREA
                                D)

   88                                   CMP R3,#(EXC_RET_BASE|EXC_RET_THREAD)
                                 //return to thread mode=no errors

   89                                   BEQ _psv_it_cont_lp0 //_psv_it_tst_ok
                                   - pendsv -                         Page   13


   90                                     MOV R0,#(ERR_EXC_RET)

   91                                     BL dbg_error_led //ERROR

   92                                   */  

   93                            /*     

   94                           _psv_it_tst_ok:    

   95                                   LDR   R0, =pctcon

   96                                   LDR   R0, [R0]

   97                                   CMP R0,#0

   98                                   BNE.N _psv_it_cont_lp0 

   99                                   

  100                           _psv_it_dbg_lp0:

  101                                   B.N _psv_it_dbg_lp0  //debug
                                 loop

  102                           */        

  103                           _psv_it_cont_lp0:

  104                                   //-------DEBUG-------

  105                                   //LDR R2, [R0, #offs_id] //dbg

  106                                   //ISB

  107                                   //DSB

  108                                   //MRS R2, PSP       //PSP->R0 (bit
                                 set)

  109                                   //STR R2, [R0,#offs_tstack_PSP]

  110                                   //извлечь параметры: в стеке PSR PC LR
                                 R12 R3 R2 R1 R0

  111                                   //LDM R12, {R0-R3}

  112                                   //LDR R3, [R12,#24]    //извлечь PC из
                                 стека

  113                                   //LDR R3, [R12,#20]    //извлечь LR из
                                 стека

  114                                   //-------------------

  115                             //R1=current priority R0=next thread
                                 R2,R3-temp

  116    00000000 00B5            PUSH {LR}

  117    00000002 00F028F8        BL select_next_SW_thread

  118    00000006 5DF804EB        POP {LR}

  119                               

  120    0000000A 0028            CMP  R0,#0

  121    0000000C 22D0            BEQ _psw_t_ret //поток не выбран

  122                             

  123    0000000E 5D49            LDR R1,=pctcon

  124    00000010 0968            LDR R1,[R1]

  125    00000012 8142            CMP R1,R0
                                   - pendsv -                         Page   14


  126    00000014 1ED0            BEQ   _psw_t_ret //текущий==возврат

  127                           

  128                           _psw_switch_threads_context_to_R0:         
                                 

  129                             //=========смена текущего потока(процесса)==
                                ==========

  130                             /*

  131                              переключение потока и выход из прерывания.

  132                              используется в прерываниях PendSV,SVcall,фу
                                нкции Sleep и др.

  133                              */

  134                           

  135                             //PSR PC LR R12 R3 R2 R1 R0

  136    00000016 00F085F8        BL sub_switch_context_to_R0_ //сохранить
                                       контекст и получить новое значение
                                       контекста

  137                                   

  138                           //****полная проверка контекста, EXC_RETURN и
                                 режимов и выход из прерывания*****       
                                 

  139                           sub_retIT_R0_thrd_EX_RETURN: 

  140                             //---------------проверка границ стека------
                                ----------

  141                           #if ENABLE_STACK_CHECK_DEBUG == 1

  167                           #endif          

  168                              //-----------стек в пределах.Переключение
                                 режима---------   

  169                              //CONTROL : 1=NOT PRIV 2 = PSP 4=USE
                                 FPU

  170                           _psw_set_EX_RETURN:  

  171                               

  172    0000001A 5A48                  LDR   R0, =pctcon

  173    0000001C 0068                  LDR   R0, [R0]

  174                                   //LDR   R1, [R0, #offs_id] //dbg

  175                                   //------EXC_RETURN--------

  176    0000001E 0169                  LDR R1,[R0,#offs_mode]

  177                                   //PRIV? (CONTROL 0=PRIV/1=NO_PRIV)    
                                      

  178    00000020 EFF31483              MRS R3,CONTROL 

  179    00000024 23F00703              AND R3,R3,#(~7) //1=NPRIV 2=PSP
                                             4=FPU

  180                                   /*

  181                           Bit 1 SPSEL: 

  182                           Active stack pointer selection. Selects the
                                 current stack:

                                   - pendsv -                         Page   15

  183                           0: MSP is the current stack pointer 

  184                           1: PSP is the current stack pointer.

  185                           In Handler mode this bit reads as zero and
                                 ignores writes. The Cortex-M4 updates
                                 

  186                           this bit automatically on exception return.

  187                           

  188                           Бит CONTROL[0] доступен для записи только в
                                 привилеrированном состоя- 

  189                           нии. После переключения процессора на
                                 пользовательский уровень доступа 

  190                           единственный способ возврата в прежнее
                                 состояние состоит в rенерации преры-
                                 

  191                           вания и изменении состояния процессора в
                                 обработчике этоrо прерывания. 

  192                           */

  193    00000028 11F00102              ANDS R2,R1,#TM_NPRIV

  194    0000002C 18BF                  IT NE 

  195    0000002E 43F00103                ORRNE R3,R3,#1 //NPRIV

  196                                   /*

  197                                   ANDS R2,R1,#TM_PSP

  198                                   IT NE 

  199                                     ORRNE R3,R3,#2

  200                            

  201                                   ANDS R2,R1,#TM_FPU

  202                                   IT NE 

  203                                     ORRNE R3,R3,#4        

  204                                   */

  205    00000032 83F31488              MSR CONTROL,R3

  206                                   

  207    00000036 4FF00003              MOV.W R3,#0 //ZERO      

  208                                   //FPU?

  209    0000003A 11F00402              ANDS R2,R1,#(TM_FPU) //0==no FPU in use
                                              

  210    0000003E 08BF                  IT EQ

  211    00000040 43F01003              ORREQ R3,R3,#(EXC_RET_NOFPU) //16=not
                                               use

  212                                  

  213    00000044 11F00202              ANDS R2,R1,#(TM_PSP)

  214    00000048 18BF                  IT NE

  215    0000004A 43F00403              ORRNE R3,R3,#(EXC_RET_PSP) //4=PSP
                                               ,0=MSP

  216                                   

                                   - pendsv -                         Page   16

  217    0000004E 63F01603              ORR R3,R3,#(EXC_RET_BASE|EXC_RET_THREAD
                                            )//to thread

  218                            

  219                                   //возврат в режим потока

  220                                  

  221                                          

  222                                   //LDR R1, [R0, #offs_id] //dbg

  223                                   //LDR R2, [R0,#offs_tstack_PSP]

  224                                   //ADD.W R1,R0,#(offs_R4_R11_regs)
                                 //сместиться на место чтения регистров

  225                                   //LDMIA.W R1!,{R4-R11} //восстановить
                                 регистры

  226                                   //MSR PSP,R2

  227                                   //ISB

  228                                   

  229    00000052 9E46                  MOV LR,R3

  230                                   //===============================

  231                                   //LDR R12, [PSP,#24]    //извлечь PC
                                 из стека

  232                                   //CMP R12,#0        

  233                           //ELOOP:  BEQ.N ELOOP //нет адреса инструкций
                                 !

  234                                   

  235                           _psw_t_ret:

  236                             

  237    00000054 7047                  BX LR //возврат в режим обработчика
                                            /потока

  238                           //===========определение нового потока для
                                 переключения===========================

  239                           /*

  240                           возврат контекста выбранного потока в случае
                                 удачи или цикл повторяется при

  241                           невозможности выбора (реализовано для
                                 поддержки объектов синхронизации).

  242                           Прерывания могут вывести объекты ядра в
                                 сигнальное состояние

  243                           (например,Sleep для одного потока).

  244                           Поток,не прошедший проверку на синхронизацию,

  245                           не может быть выбран для планирования времени
                                 выполнения.

  246                           

  247                           R1=current priority R0=thread (0, если поток
                                 не выбран) R2,R3-temp 

  248                           */

  249                           select_next_SW_thread:

                                   - pendsv -                         Page   17

  250                             _save_op 47 

  250.1                                   ENDM

  251    00000056 0EB5            PUSH  {R1-R3,LR}

  252                             

  253    00000058 4A48            LDR       R0, =pctcon

  254    0000005A 0068            LDR       R0, [R0]

  255    0000005C 0028            CMP       R0,#0

  256    0000005E 60D0            BEQ       _ssw_t_ret //pctcon==0 !!!==return

  257    00000060 0169            LDR       R1, [R0, #offs_mode]

  258    00000062 0B46            MOV       R3,R1

  259    00000064 C1F3C401        UBFX      R1, R1, #3, #5 //биты с 3 по 7
                                             =priority

  260    00000068 03F48073        AND.W     R3,R3,#(TCRITSECT_Msk)

  261    0000006C 13B1            CBZ.N     R3,_ssw_t_check_pend_correct //PC
                                                 не в критической секции

  262    0000006E 00F00000        AND       R0,R0,#0

  263    00000072 56E0            B.N       _ssw_t_ret //Crit.Sect

  264                             

  265                             //--------------------

  266                           _ssw_t_check_pend_correct:  //проверка на
                                 корректность указателя

  267    00000074 444A            LDR       R2, =_pend_thread_

  268    00000076 1368            LDR       R3,[R2]

  269    00000078 E3B1            CBZ.N     R3,_ssw_t_ld_next //нет _pend_threa
                                                d_

  270                             //---поиск в списке ядра-------

  271    0000007A 1846            MOV R0,R3 //R3->R0

  272    0000007C ........        BL svc_find_by_handle

  273    00000080 00B9            CBNZ.N R0,_ssw_t_check_pend_equ //найден

  274    00000082 04E0            B _ssw_t_clear_pending //обнулить и найти
                                      следующий

  275                             //-----------------------------

  276                           _ssw_t_check_pend_equ:

  277    00000084 3F48            LDR       R0, =pctcon

  278    00000086 0068            LDR       R0, [R0]

  279    00000088 1368            LDR       R3, [R2]

  280    0000008A 8342            CMP       R3,R0 //это текущий?

  281    0000008C 05D1            BNE.N     _ssw_t_ld_pend //NE== запрет
                                              переключения,загрузить pend

  282                           

  283                           _ssw_t_clear_pending:

  284    0000008E 3D48            LDR       R0, =pctcon

                                   - pendsv -                         Page   18

  285    00000090 0068            LDR       R0, [R0]

  286                             //очистить pend,продолжаем перебор

  287    00000092 03F00003          AND       R3,R3,#0

  288    00000096 1360              STR       R3,[R2]

  289    00000098 0CE0              B.N       _ssw_t_ld_next //нет _pend_thread
                                               _

  290                               

  291                             //очистить _pend_thread_,установить
                                 приоритет  

  292                           _ssw_t_ld_pend:  

  293                             //LDR       R0, =pctcon

  294                             //LDR       R0, [R0]

  295    0000009A 4FF00000        MOV.W R0,#0

  296    0000009E 1060            STR       R0, [R2] //сохранить текущий квант
                                             состояния в pend

  297                             //2 = запрет одного переключения

  298    000000A0 3A4A            LDR R2,=tswFLdis0

  299    000000A2 1168            LDR R1,[R2]

  300    000000A4 41F00201        ORR R1,R1,#2//2 = запрет одного переключения

  301    000000A8 1160            STR R1,[R2] //запись текущего в _pend_thread_

  302                             

  303    000000AA 1846            MOV       R0,R3 //R3->R0 загрузить ожидающий

  304    000000AC 0169            LDR       R1, [R0, #offs_mode]

  305    000000AE C1F3C401        UBFX      R1, R1, #3, #5 //биты с 3 по 7
                                             =priority

  306    000000B2 2FE0            B         _ssw_t_ld_ch_synclist    //проверка
                                              потока на синхронизацию

  307                             //------------------------------------------
                                -----

  308                           _ssw_t_ld_next:

  309    000000B4 354A            LDR R2,=tswFLdis0

  310    000000B6 1368            LDR R3,[R2]

  311    000000B8 43F00103        ORR R3,R3,#1//1 = запрет переключения

  312    000000BC 1360            STR R3,[R2] //запись tswFLdis0

  313                             //проверка таймера для предотвращения
                                 блокирования (одинаковые приоритеты!)

  314    000000BE 344A            LDR.N R2, =(TSV_TIMER_BASE_ADR+TIMx_SR_OFFSET
                                      )

  315    000000C0 1388            LDRH  R3, [R2]

  316    000000C2 03F00103        AND   R3, R3, #1 //TIM_SR_UIF

  317                             

  318    000000C6 2DE90F50        PUSH {R0-R3,R12,LR}

  319    000000CA 012B            CMP   R3,#1

                                   - pendsv -                         Page   19

  320    000000CC 08BF            IT EQ

  321    000000CE ........        BLEQ   TSV_TIMER_IRQ_HNDLR

  322    000000D2 BDE80F50        POP  {R0-R3,R12,LR}

  323                             

  324    000000D6 2D4A            LDR R2,=tswFLdis0

  325    000000D8 1368            LDR R3,[R2]

  326    000000DA 23F00103        AND R3,R3,#0xFFFFFFFE //сброс пропуска

  327    000000DE 1360            STR R3,[R2] //запись tswFLdis0

  328                             //-------------

  329    000000E0 C068            LDR       R0, [R0, #offs_next]

  330    000000E2 48B9            CBNZ.N    R0,_ssw_t_check

  331                             //--------------------------------------

  332                           _ssw_t_dec_prio:

  333                             //if(prio==-1)prio=31;

  334    000000E4 B1F1FF3F        CMP       R1, #-1 

  335    000000E8 06BF            ITTE      EQ                //==-1

  336    000000EA 1F21              MOVEQ     R1,#31          //максимальный
                                               приоритет

  337    000000EC 00E0              BEQ.N     _ssw_t_ld_root  //begin for
                                                root

  338    000000EE 491E            SUBNE     R1,R1,#1          //else prio--

  339                             //-------------------------------------- 
                                 

  340                           _ssw_t_ld_root: 

  341    000000F0 2848            LDR.N     R0, =_proot_

  342    000000F2 0068            LDR       R0,[R0]

  343    000000F4 00B9            CBNZ      R0,_ssw_t_check  //OK

  344    000000F6 14E0            B         _ssw_t_ret     //empty root!!!

  345                             //--------------------------------------

  346                           _ssw_t_check:

  347    000000F8 0028            CMP       R0,#0

  348    000000FA F3D0            BEQ       _ssw_t_dec_prio //CTX==0 -> dec
                                              prio,load root,continue

  349                             //---проверка типа---

  350    000000FC 0288            LDRH      R2, [R0, #offs_ty]

  351    000000FE 002A            CMP       R2,#(TY_THREAD)

  352    00000100 D8D1            BNE.N     _ssw_t_ld_next 

  353                             

  354    00000102 0269            LDR       R2, [R0, #offs_mode]

  355                             //проверка suspended

  356    00000104 02F40073        AND       R3,R2,#(TM_CREATE_SUSPENDED)

                                   - pendsv -                         Page   20

  357    00000108 002B            CMP       R3,#0

  358    0000010A D3D1            BNE.N     _ssw_t_ld_next

  359                             //проверка приоритета

  360    0000010C C2F3C402        UBFX      R2, R2, #3, #5 //биты с 3 по
                                             7

  361                             //if(cprio==prio)//приоритет потока
                                 равен

  362    00000110 8A42            CMP       R2,R1

  363    00000112 CFD1            BNE.N     _ssw_t_ld_next

  364                             

  365                           _ssw_t_ld_ch_synclist:

  366                             //проверка на привязку к объектам синхрониза
                                ции,проверка sleep (C)

  367    00000114 03B4            PUSH {R0,R1}

  368    00000116 ........        BL _check_for_sync

  369    0000011A 0246            MOV R2,R0

  370    0000011C 03BC            POP {R0,R1}

  371    0000011E 002A            CMP R2,#0

  372    00000120 C8D0            BEQ.N _ssw_t_ld_next //синхронизация не
                                          пройдена(сигнальное состояние
                                          невозможно)

  373                           //возврат контекста выбранного потока в случае
                                 удачи или 0 при невозможности выбора. 
                                 

  374                           _ssw_t_ret: 

  375    00000122 0EBD            POP {R1-R3,PC} //output:R0=selected
                                       thread

  376                             

  377                           //=====================переключить на поток
                                 R0==================================

  378                           sub_switch_context_to_R0_: 

  379                               _save_op 48 

  379.1                                   ENDM

  380    00000124 2DE90E50         PUSH {R1-R3,R12,LR}

  381                              //R0==new ctx, R1=current ctx

  382                              //сохранить указатель стека

  383    00000128 164A             LDR R2,=pctcon  //указатель на контекст

  384    0000012A 1168             LDR R1,[R2]     //значение указателя

  385    0000012C 8142             CMP R1,R0

  386    0000012E 25D0             BEQ.N swr0_ret  //это текущий !

  387                              

  388    00000130 D1F81030         LDR.W R3,[R1,#offs_mode] 

  389    00000134 03F48073         AND.W R3,R3,#(TCRITSECT_Msk)

  390    00000138 002B             CMP  R3,#0
                                   - pendsv -                         Page   21


  391    0000013A 18BF             IT   NE

  392    0000013C 0846               MOVNE R0,R1    //загрузить текущий

  393    0000013E 1DD1               BNE.N swr0_ret //PC в критической секции
                                             !

  394                              //------------------------------

  395                              //сохранение контекста FPU - автоматическое
                                , при прерывании !

  396                              //------------------------------

  397                              //сохранить стек текущего контекста

  398    00000140 EFF30983         MRS   R3, PSP

  399    00000144 8B61             STR   R3, [R1,#offs_tstack_PSP]

  400                              

  401    00000146 01F13801         ADD.W R1,R1,#(offs_R4_R11_regs) //сместиться
                                        на место записи регистров

  402    0000014A A1E8F00F         STMIA.W R1!,{R4-R11} //сохранить регистры

  403                           

  404    0000014E 00F13801         ADD.W R1,R0,#(offs_R4_R11_regs) //сместиться
                                        на место чтения регистров

  405    00000152 B1E8F00F         LDMIA.W R1!,{R4-R11} //восстановить
                                          регистры

  406                           

  407                              //восстановить стек следующего контекста

  408    00000156 8369             LDR   R3, [R0,#offs_tstack_PSP]

  409    00000158 83F30988         MSR   PSP,R3

  410    0000015C BFF36F8F         ISB

  411    00000160 002B             CMP R3,#0

  412    00000162 FED0          psw_ERR_DLOOP: BEQ.N  psw_ERR_DLOOP 

  413                              

  414    00000164 D3F818C0         LDR R12, [R3,#24]    //извлечь PC из
                                        стека

  415                              //ANDS R1, R12,#1       //THUMB ?

  416                              //BEQ.N dloop1

  417    00000168 BCF1000F         CMP R12,#0 //проверка PC

  418    0000016C 00D1             BNE.N sswct_save_f

  419                              

  420                           dloop1:

  421    0000016E FEE7              B dloop1

  422                              //------------------------------   
                                 

  423                           sswct_save_f:   

  424                              //поток активен

  425    00000170 4188             LDRH R1,[R0,#offs_flags] 

                                   - pendsv -                         Page   22

  426    00000172 41F00101         ORR  R1,R1,#(CF_SIGNAL)

  427    00000176 4180             STRH R1,[R0,#offs_flags] 

  428                              

  429    00000178 C2F80000         STR.W R0,[R2] //записать новое значение
                                        текущего контекста

  430                              

  431                           swr0_ret:

  432                              

  433    0000017C BDE80E50         POP {R1-R3,R12,LR}

  434    00000180 7047             BX LR

  435                           //============================================
                                ==================================

  436                           

  436.1                                  TABLE

  436.2  00000184 ........              Reference on line 123,172,253,277,284,3
                                            83

  436.3  00000188 ........              Reference on line 267

  436.4  0000018C ........              Reference on line 298,309,324

  436.5  00000190 10000040              Reference on line 314

  436.6  00000194 ........              Reference on line 341

  437                                   END





EOF                  DELIMITER 

\n                   DELIMITER 

                     DELIMITER 

!                    OPERATOR 

!=                   OPERATOR 

%                    OPERATOR 

&                    OPERATOR 

&&                   OPERATOR 

(                    OPERATOR 

(                    DELIMITER 

)                    OPERATOR 

)                    DELIMITER 

*                    OPERATOR 

+                    OPERATOR 

,                    DELIMITER 

-                    OPERATOR 

.                    Target symbol: 24 

/                    OPERATOR 
                                   - pendsv -                         Page   23


/                    DELIMITER 

:                    Target symbol: 22 

:                    DELIMITER 

;                    Target symbol: 23 

<                    OPERATOR 

<<                   OPERATOR 

<=                   OPERATOR 

<>                   OPERATOR 

=                    OPERATOR 

=                    DIRECTIVE 

==                   OPERATOR 

>                    OPERATOR 

>=                   OPERATOR 

>>                   OPERATOR 

@                    DELIMITER 

AAPCS                DIRECTIVE 

ACTLR_OFFSET         #define, value: 0x008, line:     234:1  

ALIAS                DIRECTIVE 

ALIGN                DIRECTIVE 

ALIGNRAM             DIRECTIVE 

ALIGNROM             DIRECTIVE 

ANOTE                DIRECTIVE 

APSR_NZCV            REGISTER 

ARGFRAME             DIRECTIVE 

ARM                  DIRECTIVE 

ASEGN                DIRECTIVE 

ASR                  MNEMONIC 

BIT                  SEGMENT TYPE 

BYTE1                OPERATOR 

BYTE2                OPERATOR 

BYTE3                OPERATOR 

BYTE4                OPERATOR 

C0                   REGISTER 

C1                   REGISTER 

C10                  REGISTER 

C11                  REGISTER 

C12                  REGISTER 

C13                  REGISTER 

C14                  REGISTER 
                                   - pendsv -                         Page   24


C15                  REGISTER 

C2                   REGISTER 

C3                   REGISTER 

C4                   REGISTER 

C5                   REGISTER 

C6                   REGISTER 

C7                   REGISTER 

C8                   REGISTER 

C9                   REGISTER 

CALL_GRAPH_ROOT      DIRECTIVE 

CASEOFF              DIRECTIVE 

CASEON               DIRECTIVE 

CBREL                OPERATOR 

CBREL_NEAR           OPERATOR 

CFI                  DIRECTIVE 

CF_ABANDONED         #define, value: 0x4000, line:     221:1  

CF_AUTORESET         #define, value: 8, line:     214:1  

CF_CAPTSTATE         #define, value: 0x2000, line:     220:1  

CF_PASSIVE           #define, value: 0, line:     208:1  

CF_PLAIN             #define, value: 0, line:     216:1  

CF_RECURSIVE         #define, value: 16, line:     217:1  

CF_SIGNAL            #define, value: 1, line:     209:1        426

CF_TIMED             #define, value: 32, line:     218:1  

CF_TIMEOUT           #define, value: 0x8000, line:     222:1  

CF_WAIT_ALL          #define, value: 2, line:     211:1  

CF_WAIT_MULTIPLE     #define, value: 4, line:     212:1  

CODE                 SEGMENT TYPE 

CODE                 DIRECTIVE 

CODE16               DIRECTIVE 

CODE32               DIRECTIVE 

COL                  DIRECTIVE 

CONST                SEGMENT TYPE 

CORE_DBG_LEN         #define, value: 8, line:      26:1  

CORE_DBG_OPERATION   #define, value: 0, line:      25:1         14       61

CORE_IT_PRIO_GROUP   #define, value: 3, line:      34:1  

CORE_MPU_PROTECTION  #define, value: 0, line:      18:1  

CORE_NVIC_PriorityGroup #define, value: NVIC_PriorityGroup_2, line:      33:1  

CoreDebug_BASE       #define, value: (0xE000EDF0UL), line:     227:1  

D0                   REGISTER 
                                   - pendsv -                         Page   25


D1                   REGISTER 

D10                  REGISTER 

D11                  REGISTER 

D12                  REGISTER 

D13                  REGISTER 

D14                  REGISTER 

D15                  REGISTER 

D2                   REGISTER 

D3                   REGISTER 

D4                   REGISTER 

D5                   REGISTER 

D6                   REGISTER 

D7                   REGISTER 

D8                   REGISTER 

D9                   REGISTER 

DATA                 SEGMENT TYPE 

DATA                 DIRECTIVE 

DATE                 OPERATOR 

DC16                 DIRECTIVE 

DC24                 DIRECTIVE 

DC32                 DIRECTIVE 

DC8                  DIRECTIVE 

DCB                  DIRECTIVE 

DCD                  DIRECTIVE 

DCREL32              DIRECTIVE 

DCW                  DIRECTIVE 

DEFAULT_TSTACK_SIZE  #define, value: 0x1000, line:      21:1  

DEFINE               DIRECTIVE 

DF32                 DIRECTIVE 

DF64                 DIRECTIVE 

DISABLE_MCU_BUFFERING_MODE #define, value: 0, line:      17:1  

DS16                 DIRECTIVE 

DS24                 DIRECTIVE 

DS32                 DIRECTIVE 

DS8                  DIRECTIVE 

ELSE                 DIRECTIVE 

ELSEIF               DIRECTIVE 

ENABLE_MULTITHREADING #define, value: 1, line:      16:1  

ENABLE_STACK_CHECK_DEBUG #define, value: 0, line:      24:1        141
                                   - pendsv -                         Page   26


ENABLE_USE_FPU       #define, value: 1, line:      15:1  

END                  DIRECTIVE 

ENDIF                DIRECTIVE 

ENDM                 DIRECTIVE 

ENDMOD               DIRECTIVE 

ENDR                 DIRECTIVE 

EQU                  DIRECTIVE 

ERR_EXC_RET          #define, value: 1, line:     267:1  

ERR_IT_STATE         #define, value: 64, line:     275:1  

ERR_LO_STACK_LIM     #define, value: 4, line:     271:1  

ERR_NOT_FOUND        #define, value: 16, line:     273:1  

ERR_OUT_OF_MEMORY    #define, value: 32, line:     274:1  

ERR_STACK_LIM        #define, value: 6, line:     269:1  

ERR_UP_STACK_LIM     #define, value: 2, line:     270:1  

ERR_ZERO_PTR         #define, value: 8, line:     272:1  

EVEN                 DIRECTIVE 

EXCEPTION_CODE       DIRECTIVE 

EXC_RET_BASE         #define, value: 0xFFFFFFE1, line:     121:1        217

EXC_RET_HALDLER      #define, value: 0, line:     130:1  

EXC_RET_HALDLER_MSP  #define, value: 0xFFFFFFF1, line:     123:1  

EXC_RET_MSP          #define, value: 0, line:     127:1  

EXC_RET_NOFPU        #define, value: 16, line:     133:1        211

EXC_RET_PSP          #define, value: 4, line:     128:1        215

EXC_RET_THREAD       #define, value: 8, line:     131:1        217

EXC_RET_THREAD_MSP   #define, value: 0xFFFFFFF9, line:     124:1  

EXC_RET_THREAD_PSP   #define, value: 0xFFFFFFFB, line:     125:1  

EXC_RET_USEFPU       #define, value: 0, line:     134:1  

EXC_RET_USE_BITMSK   #define, value: 0x1F, line:     119:1  

EXITM                DIRECTIVE 

EXPORT               DIRECTIVE 

EXTERN               DIRECTIVE 

EXTWEAK              DIRECTIVE 

FAR                  SEGMENT TYPE 

FARCODE              SEGMENT TYPE 

FARCONST             SEGMENT TYPE 

FARDATA              SEGMENT TYPE 

FPEXC                REGISTER 

FPINST               REGISTER 

FPINST2              REGISTER 
                                   - pendsv -                         Page   27


FPSCR                REGISTER 

FPSID                REGISTER 

FUNCALL              DIRECTIVE 

FUNCTION             DIRECTIVE 

HIGH                 OPERATOR 

HUGE                 SEGMENT TYPE 

HUGECODE             SEGMENT TYPE 

HUGECONST            SEGMENT TYPE 

HUGEDATA             SEGMENT TYPE 

HWRD                 OPERATOR 

ICTR_OFFSET          #define, value: 0x004, line:     233:1  

IDATA                SEGMENT TYPE 

IF                   DIRECTIVE 

IMPORT               DIRECTIVE 

INCLUDE              DIRECTIVE 

INFINITE             #define, value: (0xFFFFFFFFUL), line:     279:1  

ITM_BASE             #define, value: (0xE0000000UL), line:     226:1  

LIBRARY              DIRECTIVE 

LOCAL                DIRECTIVE 

LOCFRAME             DIRECTIVE 

LOW                  OPERATOR 

LR                   REGISTER 

LSL                  MNEMONIC 

LSR                  MNEMONIC 

LSTCND               DIRECTIVE 

LSTCOD               DIRECTIVE 

LSTEXP               DIRECTIVE 

LSTMAC               DIRECTIVE 

LSTOUT               DIRECTIVE 

LSTPAG               DIRECTIVE 

LSTREP               DIRECTIVE 

LSTXRF               DIRECTIVE 

LTORG                DIRECTIVE 

LWRD                 OPERATOR 

MACRO                DIRECTIVE 

MAX_MSP_STACK_TOP    #define, value: 0x200FFFFF, line:      20:1  

MODULE               DIRECTIVE 

MVFR0                REGISTER 

MVFR1                REGISTER 
                                   - pendsv -                         Page   28


NAME                 DIRECTIVE 

NEAR                 SEGMENT TYPE 

NEARCODE             SEGMENT TYPE 

NEARCONST            SEGMENT TYPE 

NEARDATA             SEGMENT TYPE 

NOALLOC              SEGMENT TYPE 

NOCALL               DIRECTIVE 

NOROOT               SEGMENT TYPE 

NPAGE                SEGMENT TYPE 

NVIC_BASE            #define, value: (SCS_BASE + 0x0100UL), line:     229:1  

NVIC_BASE_ADR        #define, value: 0xE000E100, line:     144:1  

NVIC_INT_CTRL_CONST  #define, value: 0xE000ED04, line:     282:1  

NVIC_PriorityGroup_2 Target symbol: 0 

ODD                  DIRECTIVE 

P0                   REGISTER 

P1                   REGISTER 

P10                  REGISTER 

P11                  REGISTER 

P12                  REGISTER 

P13                  REGISTER 

P14                  REGISTER 

P15                  REGISTER 

P2                   REGISTER 

P3                   REGISTER 

P4                   REGISTER 

P5                   REGISTER 

P6                   REGISTER 

P7                   REGISTER 

P8                   REGISTER 

P9                   REGISTER 

PAGE                 DIRECTIVE 

PAGSIZ               DIRECTIVE 

PC                   REGISTER 

PRESERVE8            DIRECTIVE 

PROGRAM              DIRECTIVE 

PUBLIC               DIRECTIVE 

PUBWEAK              DIRECTIVE 

R0                   REGISTER 

R1                   REGISTER 
                                   - pendsv -                         Page   29


R10                  REGISTER 

R11                  REGISTER 

R12                  REGISTER 

R13                  REGISTER 

R14                  REGISTER 

R15                  REGISTER 

R2                   REGISTER 

R3                   REGISTER 

R4                   REGISTER 

R5                   REGISTER 

R6                   REGISTER 

R7                   REGISTER 

R8                   REGISTER 

R9                   REGISTER 

RADIX                DIRECTIVE 

RCC_APB1PeriphClockCmd Target symbol: 0 

RCC_APB1Periph_TIM2  Target symbol: 0 

REGISTER             SEGMENT TYPE 

RELOC_ARM_PREL31     OPERATOR 

RELOC_ARM_TARGET1    OPERATOR 

RELOC_ARM_TARGET2    OPERATOR 

RELOC_LOCAL          OPERATOR 

REORDER              SEGMENT TYPE 

REPT                 DIRECTIVE 

REPTC                DIRECTIVE 

REPTI                DIRECTIVE 

REQUIRE              DIRECTIVE 

REQUIRE8             DIRECTIVE 

ROOT                 SEGMENT TYPE 

ROR                  MNEMONIC 

RRX                  MNEMONIC 

RSEG                 DIRECTIVE 

RTMODEL              DIRECTIVE 

S0                   REGISTER 

S1                   REGISTER 

S10                  REGISTER 

S11                  REGISTER 

S12                  REGISTER 

S13                  REGISTER 
                                   - pendsv -                         Page   30


S14                  REGISTER 

S15                  REGISTER 

S16                  REGISTER 

S17                  REGISTER 

S18                  REGISTER 

S19                  REGISTER 

S2                   REGISTER 

S20                  REGISTER 

S21                  REGISTER 

S22                  REGISTER 

S23                  REGISTER 

S24                  REGISTER 

S25                  REGISTER 

S26                  REGISTER 

S27                  REGISTER 

S28                  REGISTER 

S29                  REGISTER 

S3                   REGISTER 

S30                  REGISTER 

S31                  REGISTER 

S4                   REGISTER 

S5                   REGISTER 

S6                   REGISTER 

S7                   REGISTER 

S8                   REGISTER 

S9                   REGISTER 

SBREL                OPERATOR 

SBREL_NEAR           OPERATOR 

SCB_BASE             #define, value: (SCS_BASE + 0x0D00UL), line:     230:1  

SCB_CCR_REG          #define, value: 0xE000ED14, line:     251:1  

SCB_ICSR_OFFSET      #define, value: 0x004, line:     259:1  

SCB_ICSR_PENDSVCLR_BitPos #define, value: 27, line:     264:1  

SCB_ICSR_PENDSVCLR_MskVal #define, value: (1UL << SCB_ICSR_PENDSVCLR_BitPos), line:     265:1  

SCB_ICSR_PENDSVSET_BitPos #define, value: 28, line:     261:1  

SCB_ICSR_PENDSVSET_MskVal #define, value: (1UL << SCB_ICSR_PENDSVSET_BitPos), line:     262:1  

SCB_SHCSR_SVCALLPENDED_BitPos #define, value: 15, line:     256:1  

SCB_SHCSR_SVCALLPENDED_MskVal #define, value: (1UL << SCB_SHCSR_SVCALLPENDED_BitPos), line:     257:1  

SCS_BASE             #define, value: (0xE000E000UL), line:     225:1  

SCnSCB_ACTLR_DISDEFWBUF_BitPos #define, value: 1, line:     237:1  
                                   - pendsv -                         Page   31


SCnSCB_ACTLR_DISDEFWBUF_MskVal #define, value: (1UL << SCnSCB_ACTLR_DISDEFWBUF_BitPos), line:     238:1  

SCnSCB_ACTLR_DISMCYCINT_BitPos #define, value: 0, line:     240:1  

SCnSCB_ACTLR_DISMCYCINT_MskVal #define, value: (1UL << SCnSCB_ACTLR_DISMCYCINT_BitPos), line:     241:1  

SECTION              DIRECTIVE 

SECTION_GROUP        DIRECTIVE 

SECTION_LINK         DIRECTIVE 

SECTION_TYPE         DIRECTIVE 

SET                  DIRECTIVE 

SETA                 DIRECTIVE 

SFB                  OPERATOR 

SFE                  OPERATOR 

SFS                  OPERATOR 

SHCSR_OFFSET         #define, value: 0x24, line:     248:1  

SHPR2_OFFSET         #define, value: 0x1C, line:     245:1  

SHPR_OFFSET          #define, value: 0x18, line:     244:1  

SIZEOF               OPERATOR 

SORT                 SEGMENT TYPE 

SP                   REGISTER 

STKALIGN_VAL         #define, value: 0x200, line:     254:1  

SysTick_BASE         #define, value: (SCS_BASE + 0x0010UL), line:     228:1  

TCRITSECT_BIT_Pos    #define, value: 8, line:      69:1        260      389

TCRITSECT_Msk        #define, value: (1UL << TCRITSECT_BIT_Pos), line:      70:1        260      389

TFPU_MODE_BIT_Pos    #define, value: 2, line:      63:1        209

TFPU_MODE_Msk        #define, value: (1UL << TFPU_MODE_BIT_Pos), line:      64:1        209

THUMB                DIRECTIVE 

THUMBX               DIRECTIVE 

TIM2                 Target symbol: 0 

TIM2_IRQn            Target symbol: 0 

TIMx_DIER_OFFSET     #define, value: 0x0C, line:     142:1  

TIMx_SR_OFFSET       #define, value: 0x10, line:     141:1        314

TMMRAM_CTX_BIT_Pos   #define, value: 11, line:      79:1  

TMMRAM_CTX_Msk       #define, value: (1UL << TMMRAM_CTX_BIT_Pos), line:      80:1  

TMMRAM_STACK_BIT_Pos #define, value: 12, line:      82:1  

TMMRAM_STACK_Msk     #define, value: (1UL << TMMRAM_STACK_BIT_Pos), line:      83:1  

TM_CREATE_SUSPENDED  #define, value: TSUSPENDED_Msk, line:     102:1        356

TM_FPU               #define, value: TFPU_MODE_Msk, line:     100:1        209

TM_MSP               #define, value: 0, line:      90:1  

TM_NFPU              #define, value: 0, line:      99:1  

TM_NPRIV             #define, value: TPRIV_Msk, line:      88:1        193
                                   - pendsv -                         Page   32


TM_PRIV              #define, value: 0, line:      87:1  

TM_PSP               #define, value: TSTACK_MODE_Msk, line:      91:1        213

TM_SET_STACK_SIZE    #define, value: TSTACKSIZE_Msk, line:     103:1  

TPENDSV_IT_PRIO      #define, value: CORE_IT_PRIO_GROUP, line:      48:1  

TPENDSV_IT_PRIO_SUB  #define, value: 2, line:      53:1  

TPRIO_BIT_Pos        #define, value: 3, line:      66:1  

TPRIO_Msk            #define, value: (31UL << TPRIO_BIT_Pos), line:      67:1  

TPRIV_BIT_Pos        #define, value: 0, line:      57:1        193

TPRIV_Msk            #define, value: (1UL << TPRIV_BIT_Pos), line:      58:1        193

TSTACKSIZE_BIT_Pos   #define, value: 10, line:      75:1  

TSTACKSIZE_Msk       #define, value: (1UL << TSTACKSIZE_BIT_Pos), line:      76:1  

TSTACK_MODE_BIT_Pos  #define, value: 1, line:      60:1        213

TSTACK_MODE_Msk      #define, value: (1UL << TSTACK_MODE_BIT_Pos), line:      61:1        213

TSUSPENDED_BIT_Pos   #define, value: 9, line:      72:1        356

TSUSPENDED_Msk       #define, value: (1UL << TSUSPENDED_BIT_Pos), line:      73:1        356

TSVCALL_IT_PRIO      #define, value: CORE_IT_PRIO_GROUP, line:      47:1  

TSVCALL_IT_PRIO_SUB  #define, value: 0, line:      52:1  

TSV_TIMER            #define, value: TIM2, line:     138:1  

TSV_TIMER_APBPeriph  #define, value: RCC_APB1Periph_TIM2, line:     152:1  

TSV_TIMER_ARR_1MS    #define, value: ((uint16_t)42000), line:     154:1  

TSV_TIMER_BASE_ADR   #define, value: 0x40000000, line:     139:1        314

TSV_TIMER_IRQ        #define, value: TIM2_IRQn, line:     156:1  

TSV_TIMER_IRQ_HNDLR  #define, value: TIM2_IRQHandler, line:     157:1         25      321

TSV_TIMER_PSC_1MS    #define, value: ((uint16_t)2), line:     153:1  

TSV_TIMER_RCC_APBCmd #define, value: RCC_APB1PeriphClockCmd, line:     151:1  

TSV_TIME_MS          #define, value: 1, line:      44:1  

TSV_TIM_NVIC_BIT     #define, value: 29, line:     148:1  

TSV_TIM_NVIC_ICER_OFS #define, value: 0x080, line:     147:1  

TSV_TIM_NVIC_ISER_OFS #define, value: 0, line:     146:1  

TSV_TIMx_CYCLES      #define, value: 5, line:      42:1  

TTIMER_IT_PRIO       #define, value: CORE_IT_PRIO_GROUP, line:      46:1  

TTIMER_IT_PRIO_SUB   #define, value: 1, line:      51:1  

TY_ANY               #define, value: 0xFFFF, line:     205:1  

TY_EVENT             #define, value: 3, line:     199:1  

TY_MAX               #define, value: TY_TASK, line:     203:1  

TY_MUTEX             #define, value: 2, line:     198:1  

TY_SEMAPHORE         #define, value: 1, line:     197:1  

TY_SYSTIMER          #define, value: 4, line:     200:1  

TY_TASK              #define, value: 5, line:     201:1  
                                   - pendsv -                         Page   33


TY_THREAD            #define, value: 0, line:     196:1        351

UGT                  OPERATOR 

ULT                  OPERATOR 

UNTYPED              SEGMENT TYPE 

VAR                  DIRECTIVE 

XDATA                SEGMENT TYPE 

XOR                  OPERATOR 

ZPAGE                SEGMENT TYPE 

[                    DELIMITER 

]                    DELIMITER 

^                    OPERATOR 

^                    DELIMITER 

_OCORE_SIZE          #define, value: 16, line:     169:1        176      257      304      354
                                                                      388      399      401      404
                                                                      408

__ARM4TM__           #define, value: 4, line:         0  

__ARM5TM__           #define, value: 5, line:         0  

__ARM5T__            #define, value: 5, line:         0  

__ARM5__             #define, value: 5, line:         0  

__ARM6MEDIA__        #define, value: 6, line:         0  

__ARM6M__            #define, value: 11, line:         0  

__ARM6SM__           #define, value: 12, line:         0  

__ARM6T2__           #define, value: 6, line:         0  

__ARM6__             #define, value: 6, line:         0  

__ARM7EM__           #define, value: 13, line:         0  

__ARM7__             #define, value: 7, line:         0  

__ARMVFPV1__         #define, value: 1, line:         0  

__ARMVFPV2__         #define, value: 2, line:         0  

__ARMVFPV3_D16__     #define, value: 1, line:         0  

__ARMVFPV3_FP16__    #define, value: 1, line:         0  

__ARMVFPV3__         #define, value: 3, line:         0  

__ARMVFPV4__         #define, value: 4, line:         0  

__ARMVFP_D16__       #define, value: 1, line:         0  

__ARMVFP_FP16__      #define, value: 1, line:         0  

__ARMVFP_SP__        #define, value: 1, line:         0  

__ARMVFP__           #define, value: __ARMVFPV4__, line:         0  

__ARM_MEDIA__        #define, value: 1, line:         0  

__ARM_PROFILE_M__    #define, value: 1, line:         0  

__BUILD_NUMBER__     #define,            line:         0  

__CORE_DEF_H         #define, value: , line:      12:1  
                                   - pendsv -                         Page   34


__CORE__             #define, value: __ARM7EM__, line:         0  

__DATE__             #define,            line:         0  

__FILE__             #define,            line:         0  

__IAR_SYSTEMS_ASM    #define,            line:         0  

__IAR_SYSTEMS_ASM__  #define,            line:         0  

__IASMARM__          #define, value: 1, line:         0  

__LINE__             #define,            line:         0  

__LITTLE_ENDIAN__    #define, value: 1, line:         0  

__SUBVERSION__       #define,            line:         0  

__TID__              #define,            line:         0  

__TIME__             #define,            line:         0  

__VER__              #define,            line:         0  

_numop_              Target symbol: 0 

_save_op             MACRO 

define               PREPROCESSOR DIRECTIVE 

defined              Target symbol: 0 

elif                 PREPROCESSOR DIRECTIVE 

else                 PREPROCESSOR DIRECTIVE 

endif                PREPROCESSOR DIRECTIVE 

error                PREPROCESSOR DIRECTIVE 

if                   PREPROCESSOR DIRECTIVE 

ifdef                PREPROCESSOR DIRECTIVE 

ifndef               PREPROCESSOR DIRECTIVE 

include              PREPROCESSOR DIRECTIVE 

line                 PREPROCESSOR DIRECTIVE 

message              PREPROCESSOR DIRECTIVE 

offs_R4_R11_regs     #define, value: (40+_OCORE_SIZE), line:     193:1        401      404

offs_flags           #define, value: 2, line:     173:1        425      427

offs_id              #define, value: (4+_OCORE_SIZE), line:     179:1  

offs_mode            #define, value: (0+_OCORE_SIZE), line:     178:1        176      257      304      354
                                                                      388

offs_next            #define, value: 12, line:     176:1        329

offs_prev            #define, value: 8, line:     175:1  

offs_rsv0            #define, value: (20+_OCORE_SIZE), line:     185:1  

offs_rsv1            #define, value: (24+_OCORE_SIZE), line:     186:1  

offs_rsv2            #define, value: (28+_OCORE_SIZE), line:     187:1  

offs_sync            #define, value: 4, line:     174:1  

offs_sync_size       #define, value: (36+_OCORE_SIZE), line:     191:1  

offs_tstaRAM_PSP     #define, value: (12+_OCORE_SIZE), line:     182:1  

                                   - pendsv -                         Page   35

offs_tstack_PSP      #define, value: (8+_OCORE_SIZE), line:     181:1        399      408

offs_tstsize_PSP     #define, value: (16+_OCORE_SIZE), line:     183:1  

offs_ty              #define, value: 0, line:     172:1        350

offs_wait_ms         #define, value: (32+_OCORE_SIZE), line:     189:1  

pragma               PREPROCESSOR DIRECTIVE 

st_LR                #define, value: 20, line:     162:1  

st_PC                #define, value: 24, line:     161:1  

st_PSR               #define, value: 28, line:     160:1  

st_R0                #define, value: 0, line:     167:1  

st_R1                #define, value: 4, line:     166:1  

st_R12               #define, value: 16, line:     163:1  

st_R2                #define, value: 8, line:     165:1  

st_R3                #define, value: 12, line:     164:1  

uint16_t             Target symbol: 0 

undef                PREPROCESSOR DIRECTIVE 

{                    DELIMITER 

|                    OPERATOR 

||                   OPERATOR 

}                    DELIMITER 

~                    OPERATOR 



Segment             Type 	Mode

----------------------------------------

OS_CORE             CODE  	REL 

OS_CORE_DATA        DATA  	REL 

__EXTERNS           CODE  	ABS Org:0 



Label               Mode   Type                   Segment    Value/Offset

------------------------------------------------------------------------------

??DUMMY_SYMBOL_IN_BACKEND_PARSED_OPERANDS
                    ABS    CONST UNTYP.           ASEG       1267 

HardFault_Handler   ABS    CONST EXT [-001] UNTYP. __EXTERNS  Solved Extern 

LSCAN2_LEDToggle    ABS    CONST EXT [-001] UNTYP. __EXTERNS  Solved Extern 

PendSV_Handler      REL    CONST PUB UNTYP.       OS_CORE    1 

TID                 ABS    CONST UNTYP.           ASEG       4F00 

TIM2_IRQHandler     ABS    CONST EXT [000] UNTYP. __EXTERNS  Solved Extern 

UsageFault_Handler  ABS    CONST EXT [-001] UNTYP. __EXTERNS  Solved Extern 

__lab0              REL    CONST UNTYP.           OS_CORE    184 

__lab1              REL    CONST UNTYP.           OS_CORE    188 

__lab2              REL    CONST UNTYP.           OS_CORE    18C 
                                   - pendsv -                         Page   36


__lab3              REL    CONST UNTYP.           OS_CORE    190 

__lab4              REL    CONST UNTYP.           OS_CORE    194 

__vector_table      ABS    CONST EXT [-001] UNTYP. __EXTERNS  Solved Extern 

_check_for_sync     ABS    CONST EXT [005] UNTYP. __EXTERNS  Solved Extern 

_pend_              ABS    CONST EXT [-001] UNTYP. __EXTERNS  Solved Extern 

_pend_thread_       REL    CONST PUB UNTYP.       OS_CORE_DA 0 

_proot_             ABS    CONST EXT [002] UNTYP. __EXTERNS  Solved Extern 

_psv_it_cont_lp0    REL    CONST UNTYP.           OS_CORE    1 

_psw_set_EX_RETURN  REL    CONST UNTYP.           OS_CORE    1B 

_psw_switch_threads_context_to_R0
                    REL    CONST PUB UNTYP.       OS_CORE    17 

_psw_t_ret          REL    CONST UNTYP.           OS_CORE    55 

_ssw_t_check        REL    CONST UNTYP.           OS_CORE    F9 

_ssw_t_check_pend_correctREL    CONST UNTYP.           OS_CORE    75 

_ssw_t_check_pend_equREL    CONST UNTYP.           OS_CORE    85 

_ssw_t_clear_pendingREL    CONST UNTYP.           OS_CORE    8F 

_ssw_t_dec_prio     REL    CONST UNTYP.           OS_CORE    E5 

_ssw_t_ld_ch_synclistREL    CONST UNTYP.           OS_CORE    115 

_ssw_t_ld_next      REL    CONST UNTYP.           OS_CORE    B5 

_ssw_t_ld_pend      REL    CONST UNTYP.           OS_CORE    9B 

_ssw_t_ld_root      REL    CONST UNTYP.           OS_CORE    F1 

_ssw_t_ret          REL    CONST UNTYP.           OS_CORE    123 

ccfree              ABS    CONST EXT [-001] UNTYP. __EXTERNS  Solved Extern 

core_debug          ABS    CONST EXT [-001] UNTYP. __EXTERNS  Solved Extern 

dbg_error_led       ABS    CONST EXT [-001] UNTYP. __EXTERNS  Solved Extern 

dloop1              REL    CONST UNTYP.           OS_CORE    16F 

led_loop            ABS    CONST EXT [-001] UNTYP. __EXTERNS  Solved Extern 

pctcon              ABS    CONST EXT [003] UNTYP. __EXTERNS  Solved Extern 

psw_ERR_DLOOP       REL    CONST UNTYP.           OS_CORE    163 

select_next_SW_threadREL    CONST PUB UNTYP.       OS_CORE    57 

sswct_save_f        REL    CONST UNTYP.           OS_CORE    171 

sub_retIT_R0_thrd_EX_RETURNREL    CONST PUB UNTYP.       OS_CORE    1B 

sub_switch_context_to_R0_REL    CONST PUB UNTYP.       OS_CORE    125 

svc_find_by_handle  ABS    CONST EXT [001] UNTYP. __EXTERNS  Solved Extern 

swr0_ret            REL    CONST UNTYP.           OS_CORE    17D 

tswFLdis0           ABS    CONST EXT [004] UNTYP. __EXTERNS  Solved Extern 





##############################
#           CRC:0            #
#        Errors:   0         #
#        Warnings: 0         #
#         Bytes: 412         #
##############################



