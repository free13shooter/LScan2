                                   - core_a -                         Page    1

###############################################################################
#                                                                             #
#     IAR Assembler V7.50.2.10312/W32 for ARM 25/Aug/2022  15:50:57           #
#     Copyright 1999-2015 IAR Systems AB.                                     #
#                                                                             #
#           Source file   =  E:\STM32\LScan2\OS\core_a.s                      #
#           List file     =  E:\STM32\LScan2\Debug\List\core_a.lst            #
#           Object file   =  E:\STM32\LScan2\Debug\Obj\core_a.o               #
#           Command line  =  E:\STM32\LScan2\OS\core_a.s                      #
#                            -OE:\STM32\LScan2\Debug\Obj -s+ -M<> -w+ -r      #
#                            -LE:\STM32\LScan2\Debug\List -cM -i -B -p80 -t8  #
#                            -xDI2 --cpu Cortex-M4 --fpu VFPv4_sp -n          #
#                                                                             #
###############################################################################

    1                           /*============================================
                                ==================================

    2                                               core functions+task
                                 scheduler

    3                                                   @dem1305 15.04.2017

    4                           ==============================================
                                ================================*/

    5                           #include "core_def.h"

    1                           /**

    2                             Laser project by dem1305

    3                           

    4                             @2017

    5                             

    6                             файл определений данных и констант
                                 

    7                           */

    8                           //--------------------------------------------
                                --------------------------------//

    9                           

   10                           

   11                           #ifndef __CORE_DEF_H

   12                           #define __CORE_DEF_H

   13                           //--------------------------------------------
                                --------------------------------//

   14                           //если определен ENABLE_MULTITHREADING=1 -
                                 включить многопоточный режим

   15                           #define ENABLE_USE_FPU                1
                                 //использование сопроцессора

   16                           #define ENABLE_MULTITHREADING        
                                 1

   17                           #define DISABLE_MCU_BUFFERING_MODE    0
                                 //отключить буферизацию(эскалация отказов)

   18                           #define CORE_MPU_PROTECTION           0 //1
                                 //использовать MPU для защиты памяти контекста
                                 потока (DEBUG MODE)

   19                             

   20                           #define MAX_MSP_STACK_TOP         0x200FFFFF//
                                верхняя граница

                                   - core_a -                         Page    2

   21                           #define DEFAULT_TSTACK_SIZE       0x1000     
                                 //4096 Стек операционной системы

   22                           

   23                           

   24                           #define ENABLE_STACK_CHECK_DEBUG  0 //1
                                 //необходимо для отладки ОС

   25                           #define CORE_DBG_OPERATION        0 //1
                                 //необходимо для отладки ОС,запись последней
                                 операции

   26                           #define CORE_DBG_LEN              8

   27                           //--------------------------------------------
                                --------------------------------//

   28                           /*

   29                           группировка приоритетов прерываний.

   30                           Прерывания для переключения контекстов требуют
                                 низшего приоритета для исключения 

   31                           перекрытия других прерываний и невозможности
                                 подмены EX_RETURN .

   32                           */

   33                           #define CORE_NVIC_PriorityGroup        
                                 NVIC_PriorityGroup_2    // !!! ЭТО ПОЛНОЕ
                                 ЗНАЧЕНИЕ ПОЛЯ PRIGROUP для OR-операции биты
                                 8-10 SCB->AIRCR [0-3] приоритет:[0-3]подприори
                                тет

   34                           #define CORE_IT_PRIO_GROUP              3     
                                                  //приоритет группы прерываний

   35                           //--------------------------------------------
                                --------------------------------//

   36                           /*

   37                           переключение потоков происходит по истечении
                                 TSV_TIMx_CYCLES циклов 

   38                           таймера , прерывания которого следуют с
                                 интервалом TSV_TIME_MS :

   39                           TSV_TIMx_CYCLES * TSV_TIME_MS = квант времени
                                 одного контекста 

   40                           */

   41                            

   42                           #define TSV_TIMx_CYCLES       5          
                                 //количество интервалов таймера для переключен
                                ия

   43                           

   44                           #define TSV_TIME_MS           1          
                                 //интервал таймера переключения контекстов

   45                           //группа прерываний ядра,приоритет группы

   46                           #define TTIMER_IT_PRIO        CORE_IT_PRIO_GRO
                                UP  //приоритет системного таймера сервисов

   47                           #define TSVCALL_IT_PRIO       CORE_IT_PRIO_GRO
                                UP  //приоритет прерываний SVCall

   48                           #define TPENDSV_IT_PRIO       CORE_IT_PRIO_GRO
                                UP  //приоритет прерываний PendSV (самый
                                 низкий)
                                   - core_a -                         Page    3


   49                           

   50                           //приоритет выбора обработчика в группе при
                                 одновременных прерываниях

   51                           #define TTIMER_IT_PRIO_SUB        1     
                                 //подприоритет системного таймера сервисов

   52                           #define TSVCALL_IT_PRIO_SUB       0     
                                 //подприоритет прерываний SVCall

   53                           #define TPENDSV_IT_PRIO_SUB       2     
                                 //подприоритет прерываний PendSV (самый
                                 низкий)

   54                           

   55                           //--------------------------------------------
                                --------------------------------//

   56                           // MODE MASK

   57                           #define TPRIV_BIT_Pos       0

   58                           #define TPRIV_Msk           (1UL << TPRIV_BIT_
                                Pos)

   59                           

   60                           #define TSTACK_MODE_BIT_Pos 1

   61                           #define TSTACK_MODE_Msk     (1UL << TSTACK_MOD
                                E_BIT_Pos)

   62                           

   63                           #define TFPU_MODE_BIT_Pos   2

   64                           #define TFPU_MODE_Msk       (1UL << TFPU_MODE_
                                BIT_Pos)

   65                           

   66                           #define TPRIO_BIT_Pos       3

   67                           #define TPRIO_Msk           (31UL <<
                                 TPRIO_BIT_Pos)

   68                           

   69                           #define TCRITSECT_BIT_Pos   8

   70                           #define TCRITSECT_Msk       (1UL << TCRITSECT_
                                BIT_Pos)

   71                           

   72                           #define TSUSPENDED_BIT_Pos  9

   73                           #define TSUSPENDED_Msk      (1UL << TSUSPENDED
                                _BIT_Pos)

   74                           

   75                           #define TSTACKSIZE_BIT_Pos  10

   76                           #define TSTACKSIZE_Msk      (1UL << TSTACKSIZE
                                _BIT_Pos)

   77                           

   78                           //     ************

   79                           #define TMMRAM_CTX_BIT_Pos  11   //   0x800 ==
                                 2048==не использовать память CCM_RAM для
                                 контекста

                                   - core_a -                         Page    4

   80                           #define TMMRAM_CTX_Msk      (1UL << TMMRAM_CTX
                                _BIT_Pos)

   81                           

   82                           #define TMMRAM_STACK_BIT_Pos 12   //   0x1000
                                 == 4096==не использовать память CCM_RAM для
                                 стека

   83                           #define TMMRAM_STACK_Msk     (1UL <<
                                 TMMRAM_STACK_BIT_Pos)

   84                           //     ************

   85                           

   86                           //----------режимы----------

   87                           #define TM_PRIV             0              
                                 //привилегированный

   88                           #define TM_NPRIV            TPRIV_Msk      
                                 //непривилегированный

   89                           

   90                           #define TM_MSP              0              
                                 //используется MSP

   91                           #define TM_PSP              TSTACK_MODE_Msk
                                 //используется PSP

   92                           

   93                           /*

   94                           сохранять контекст FPU в стеке PSP потока
                                 (1=нет)

   95                           CONTROL register bit 2 = FPCA: Indicates
                                 whether floating-point context currently
                                 active:

   96                           0: No floating-point context active

   97                           1: Floating-point context active.

   98                           */

   99                           #define TM_NFPU             0

  100                           #define TM_FPU              TFPU_MODE_Msk

  101                           

  102                           #define TM_CREATE_SUSPENDED TSUSPENDED_Msk 
                                 //приостановлен

  103                           #define TM_SET_STACK_SIZE   TSTACKSIZE_Msk 
                                 //при создании потока задать размер стека

  104                           /* ===========================================
                                ===========================

  105                                 CONTROL register

  106                                 доступ только в привелигированном
                                 режиме

  107                                 использовать команды MSR, MRS .

  108                                 имена битов:

  109                           

  110                           #define CTRL_PRIV    0x00000000 //бит 0
                                 привилегированный режим Thread Mode

                                   - core_a -                         Page    5

  111                           #define CTRL_NPRIV   0x00000001 //бит 0 не
                                 привилегированный режим Thread Mode

  112                           

  113                           #define CTRL_MSPSEL  0x00000000 //бит 1 выбор
                                 стека для Handler Mode (0: MSP, 1: PSP)

  114                           #define CTRL_PSPSEL  0x00000002 //бит 1 выбор
                                 стека для Handler Mode (0: MSP, 1: PSP)

  115                           

  116                           #define CTRL_FPSP    0x00000004 //сохранять ли
                                 контекст FPU в стеке

  117                           */

  118                           //EXC_RETURN

  119                           #define EXC_RET_USE_BITMSK  0x1F      
                                 //исполльзуемые биты

  120                           

  121                           #define EXC_RET_BASE        0xFFFFFFE1

  122                           

  123                           #define EXC_RET_HALDLER_MSP 0xFFFFFFF1
                                 //возврат в режим обработчика c использованием
                                 MSP[0001]

  124                           #define EXC_RET_THREAD_MSP  0xFFFFFFF9
                                 //возврат в режим потока c использованием
                                 MSP[1001]

  125                           #define EXC_RET_THREAD_PSP  0xFFFFFFFB
                                 //возврат в режим потока c использованием
                                 PSP[1011]

  126                           //-----битовые значения возврата------

  127                           #define EXC_RET_MSP     0   //возврат с
                                 использованием стека MSP

  128                           #define EXC_RET_PSP     4   //возврат с
                                 использованием стека PSP

  129                           

  130                           #define EXC_RET_HALDLER 0   //возврат в режим
                                 обработчика

  131                           #define EXC_RET_THREAD  8   //возврат в режим
                                 потока

  132                           //значение бита использования FPU при возврате
                                 (стек тот же,что у потока)

  133                           #define EXC_RET_NOFPU   16

  134                           #define EXC_RET_USEFPU  0

  135                           

  136                           

  137                           //--------------------------------------------
                                --------------------------------//

  138                           #define TSV_TIMER             TIM2            
                                      //таймер планировщика

  139                           #define TSV_TIMER_BASE_ADR    0x40000000      
                                      //TIM2 BASE

  140                           
                                   - core_a -                         Page    6


  141                           #define TIMx_SR_OFFSET        0x10            
                                      //TIM SR register offset

  142                           #define TIMx_DIER_OFFSET      0x0C            
                                      //TIM DIER register offset

  143                           

  144                           #define NVIC_BASE_ADR         0xE000E100  //!<
                                 NVIC Base Address                  */

  145                           

  146                           #define TSV_TIM_NVIC_ISER_OFS 0     
                                 //смещение регистра разреш.прерывания
                                 таймера

  147                           #define TSV_TIM_NVIC_ICER_OFS 0x080 
                                 //смещение регистра запрета прерывания
                                 таймера

  148                           #define TSV_TIM_NVIC_BIT      29     //бит для
                                 разрешения/запрета прерывания= 1<<(irq&1F)

  149                           //#define TSV_TIM_NVIC_BIT_VAL  (1UL<<TSV_TIM_
                                NVIC_BIT)     

  150                           

  151                           #define TSV_TIMER_RCC_APBCmd  RCC_APB1PeriphCl
                                ockCmd

  152                           #define TSV_TIMER_APBPeriph   RCC_APB1Periph_T
                                IM2

  153                           #define TSV_TIMER_PSC_1MS     ((uint16_t)2)

  154                           #define TSV_TIMER_ARR_1MS     ((uint16_t)42000
                                )

  155                           

  156                           #define TSV_TIMER_IRQ         TIM2_IRQn

  157                           #define TSV_TIMER_IRQ_HNDLR   TIM2_IRQHandler

  158                           //--------------------------------------------
                                --------------------------------//

  159                           //-------смещения в стеке (PSR PC LR R12 R3 R2
                                 R1 R0) -------

  160                           #define st_PSR  28    

  161                           #define st_PC   24

  162                           #define st_LR   20

  163                           #define st_R12  16

  164                           #define st_R3   12

  165                           #define st_R2   8

  166                           #define st_R1   4

  167                           #define st_R0   0

  168                           //--------------------------------------------
                                --------------------------------//

  169                           #define _OCORE_SIZE   16    //размер структуры
                                 объекта ядра,в байтах (threads.h)

  170                           //--------thread struct offset vals--------

  171                           //--------структура coreobj------->>
                                   - core_a -                         Page    7


  172                           #define offs_ty       0     //16 бит
                                 тип

  173                           #define offs_flags    2     //16 бит
                                 флаги

  174                           #define offs_sync     4     //корень списка
                                 синхронизации (двунаправленный)

  175                           #define offs_prev     8     //предыдущий
                                 контекст

  176                           #define offs_next     12    //следующий
                                 контекст

  177                           //--------структура coreobj-------<<

  178                           #define offs_mode     (0+_OCORE_SIZE)   
                                 //маска режимов

  179                           #define offs_id       (4+_OCORE_SIZE)   
                                 //идентификатор потока (int,положительное)

  180                           

  181                           #define offs_tstack_PSP   (8+_OCORE_SIZE)   
                                 //текущая вершина стека

  182                           #define offs_tstaRAM_PSP  (12+_OCORE_SIZE)  
                                 //вершина стека

  183                           #define offs_tstsize_PSP  (16+_OCORE_SIZE)  
                                 //размер стека

  184                           //резервные

  185                           #define offs_rsv0         (20+_OCORE_SIZE)  
                                 

  186                           #define offs_rsv1         (24+_OCORE_SIZE)

  187                           #define offs_rsv2         (28+_OCORE_SIZE)

  188                           

  189                           #define offs_wait_ms      (32+_OCORE_SIZE)   
                                 //всего ждать INFINITE=(ULONG)-1 -вечный
                                 сон

  190                           

  191                           #define offs_sync_size    (36+_OCORE_SIZE)   
                                 //количество объектов синхронизации

  192                           

  193                           #define offs_R4_R11_regs  (40+_OCORE_SIZE)   
                                 //остальные регистры процессора

  194                           //--------------------------------------------
                                --------------------------------//

  195                           //типы объектов ядра

  196                           #define TY_THREAD         0

  197                           #define TY_SEMAPHORE      1

  198                           #define TY_MUTEX          2

  199                           #define TY_EVENT          3

  200                           #define TY_SYSTIMER       4

  201                           #define TY_TASK           5

  202                           
                                   - core_a -                         Page    8


  203                           #define TY_MAX            TY_TASK

  204                           

  205                           #define TY_ANY            0xFFFF //любой
                                 тип

  206                           //--------------------------------------------
                                --------------------------------//

  207                           // CORE OBJECT FLAGS :  флаги объектов ядра
                                 (16 бит)

  208                           #define CF_PASSIVE        0

  209                           #define CF_SIGNAL         1

  210                           

  211                           #define CF_WAIT_ALL       2

  212                           #define CF_WAIT_MULTIPLE  4     

  213                           

  214                           #define CF_AUTORESET      8      //применитель
                                но к event

  215                           

  216                           #define CF_PLAIN          0      //нет
                                 контроля повторного захвата

  217                           #define CF_RECURSIVE      16

  218                           #define CF_TIMED          32

  219                           

  220                           #define CF_CAPTSTATE      0x2000 //в процессе
                                 захвата

  221                           #define CF_ABANDONED      0x4000 //объект
                                 брошен захватившим его потоком (поток
                                 уничтожен)

  222                           #define CF_TIMEOUT        0x8000 //таймаут

  223                           //--------------------------------------------
                                --------------------------------//

  224                           

  225                           #define SCS_BASE            (0xE000E000UL)    
                                                        /*!< System Control
                                 Space Base Address  */

  226                           #define ITM_BASE            (0xE0000000UL)    
                                                        /*!< ITM Base Address  
                                                 */

  227                           #define CoreDebug_BASE      (0xE000EDF0UL)    
                                                        /*!< Core Debug Base
                                 Address            */

  228                           #define SysTick_BASE        (SCS_BASE + 
                                 0x0010UL)                    /*!< SysTick Base
                                 Address               */

  229                           #define NVIC_BASE           (SCS_BASE + 
                                 0x0100UL)                    /*!< NVIC Base
                                 Address                  */

  230                           #define SCB_BASE            (SCS_BASE + 
                                 0x0D00UL)                    /*!< System
                                 Control Block Base Address  */

                                   - core_a -                         Page    9

  231                           

  232                           //SCS_BASE:

  233                           #define ICTR_OFFSET         0x004     /*!<
                                 Offset: 0x004 (R/ )  uint32_t Interrupt
                                 Controller Type Register     */

  234                           #define ACTLR_OFFSET        0x008     /*!<
                                 Offset: 0x008 (R/W) uint32_t Auxiliary Control
                                 Register              */

  235                           //-------------------------------

  236                           //1=запрет буферизации памяти при отображении
                                 памяти по умолчанию (локализация отказов
                                 шины)

  237                           #define SCnSCB_ACTLR_DISDEFWBUF_BitPos        
                                 1                                   /*!<
                                 ACTLR: DISDEFWBUF Position */

  238                           #define SCnSCB_ACTLR_DISDEFWBUF_MskVal       
                                 (1UL << SCnSCB_ACTLR_DISDEFWBUF_BitPos) /*!<
                                 ACTLR: DISDEFWBUF Mask */

  239                           //1=запрет прерывания многоэлементных
                                 конструкций записи/чтения регистров (LDM/STM)

  240                           #define SCnSCB_ACTLR_DISMCYCINT_BitPos        
                                 0                                   /*!<
                                 ACTLR: DISMCYCINT Position */

  241                           #define SCnSCB_ACTLR_DISMCYCINT_MskVal       
                                 (1UL << SCnSCB_ACTLR_DISMCYCINT_BitPos) /*!<
                                 ACTLR: DISMCYCINT Mask */

  242                           //-------------------------------

  243                           //System handler priority register 

  244                           #define SHPR_OFFSET     0x18

  245                           #define SHPR2_OFFSET    0x1C

  246                           

  247                           //System handler co ntrol an d state register
                                 (SHCSR) , Address offset: 0x24

  248                           #define SHCSR_OFFSET    0x24

  249                           

  250                           //!< Offset: 0x014 (R/W)  Configuration
                                 Control Register  

  251                           #define SCB_CCR_REG     0xE000ED14 //32 bit (2
                                 WORD)

  252                           

  253                           //0-выравнивание стека 4 байт, 1-выравнивание
                                 стека 8 байт , бит 9 PSR - режим выравнивания

  254                           #define STKALIGN_VAL    0x200      //девятый
                                 бит в SBC->CCR   

  255                           

  256                           #define SCB_SHCSR_SVCALLPENDED_BitPos        
                                 15                                            
                                 //< SCB SHCSR: SVCALLPENDED Position
                                 

  257                           #define SCB_SHCSR_SVCALLPENDED_MskVal        
                                 (1UL << SCB_SHCSR_SVCALLPENDED_BitPos)        
                                 //< SCB SHCSR: SVCALLPENDED Mask 
                                   - core_a -                         Page   10


  258                           //-------------------

  259                           #define SCB_ICSR_OFFSET 0x004 //(R/W) 
                                 Interrupt Control and State Register

  260                           

  261                           #define SCB_ICSR_PENDSVSET_BitPos            
                                 28                                            
                                 /*!< SCB ICSR: PENDSVSET Position */

  262                           #define SCB_ICSR_PENDSVSET_MskVal            
                                 (1UL << SCB_ICSR_PENDSVSET_BitPos)            
                                    /*!< SCB ICSR: PENDSVSET Mask */

  263                           

  264                           #define SCB_ICSR_PENDSVCLR_BitPos            
                                 27                                            
                                 /*!< SCB ICSR: PENDSVCLR Position */

  265                           #define SCB_ICSR_PENDSVCLR_MskVal            
                                 (1UL << SCB_ICSR_PENDSVCLR_BitPos)    
                                 

  266                           //--------------------------------------------
                                --------------------------------//

  267                           #define ERR_EXC_RET         1

  268                           

  269                           #define ERR_STACK_LIM       6   //указатель
                                 вершины стека PSP ниже выделенной области
                                 RAM

  270                           #define ERR_UP_STACK_LIM    2   //указатель
                                 вершины стека PSP выше выделенной области
                                 RAM

  271                           #define ERR_LO_STACK_LIM    4   //указатель
                                 вершины стека PSP ниже выделенной области
                                 RAM

  272                           #define ERR_ZERO_PTR        8   //нулевой
                                 указатель !

  273                           #define ERR_NOT_FOUND       16  //не найдено
                                 !

  274                           #define ERR_OUT_OF_MEMORY   32  //нет
                                 памяти

  275                           #define ERR_IT_STATE        64  //в состоянии
                                 прерывания

  276                           //--------------------------------------------
                                --------------------------------//

  277                           #ifndef INFINITE

  278                           //все определения бесконечности в пределах 32
                                 бит

  279                           #define INFINITE  (0xFFFFFFFFUL) //((ULONG)-1)
                                 4 байта

  280                           #endif

  281                           //--------------------------------------------
                                --------------------------------//

  282                           #define NVIC_INT_CTRL_CONST 0xE000ED04
                                 

  283                           //--------------------------------------------
                                --------------------------------//
                                   - core_a -                         Page   11


  284                           #endif//__CORE_DEF_H

    6                           //--------------------------------------------
                                --------------------------------//

    7                                   MODULE  task_s

    8                                 

    9                                   SECTION OS_CORE:CODE(2)

   10                                   

   11                           //-----------IMPORT--------------------- 
                                 

   12                                   EXTERN  __iar_program_start

   13                                   EXTERN  __iar_init_vfp    //FPU
                                 init

   14                                   EXTERN  __low_level_init

   15                                   EXTERN  __iar_data_init3  //glob.data
                                 init

   16                                   

   17                                   /*

   18                                   возврат из прерывания с проверкой
                                 EX_RETURN 

   19                                   и установкой корректного SP

   20                                   */

   21                                   

   22                                   EXTERN sub_retIT_R0_thrd_EX_RETURN
                                 

   23                                   

   24                                   EXTERN  SystemInit  //RCC

   25                                   //EXTERN  HardFault_Handler

   26                                   

   27                                   EXTERN  __vector_table

   28                                   EXTERN  InitSheduler//main sheduler
                                 service

   29                                   EXTERN  main

   30                                   EXTERN  start_svc   //start services

   31                                   EXTERN  led_loop

   32                                   EXTERN  dbg_error_led

   33                                   EXTERN  LSCAN2_LEDToggle

   34                                   EXTERN  ccfree //void  ccfree(void*
                                 m)//освобождение памяти

   35                              //--------services---------     

   36                              EXTERN  __SVC_add_core_obj          //1
                                 func connect core object

   37                              EXTERN  __SVC_set_not_privileged    //4
                                 func set npriv access

   38                              EXTERN  __SVC_set_privileged        //5
                                   - core_a -                         Page   12

                                 func set priv access

   39                              EXTERN  __SVC_delete_thread        
                                 //0

   40                              EXTERN  _psw_switch_threads_context_to_R0

   41                                   //C import

   42                                   EXTERN  _ts_scan_core_obj

   43                                   EXTERN  core_scan_tasklist

   44                           //-----------EXPORT FUNCTIONS-----------------
                                -----  

   45                                   PUBLIC  Reset_Handler

   46                                   PUBLIC  TSV_TIMER_IRQ_HNDLR

   47                                   PUBLIC  UsageFault_Handler

   48                                   PUBLIC  BusFault_Handler

   49                                   PUBLIC  HardFault_Handler

   50                                   PUBLIC  MemManage_Handler

   51                                   

   52                                   PUBLIC  call_create_new_thread //новый
                                 поток

   53                                   PUBLIC  call_delete_thread //удаление
                                 потока int DeleteThread(TCONTEXT* ptctx);

   54                                   PUBLIC  call_get_set_thread_prio //int
                                 (HTHREAD pCTX_R0,uint8_t priority_R1,HTHREAD
                                 ht_R2,uint8_t bget_set bget_R3);//+

   55                                   PUBLIC  ResumeThread      //int
                                 ResumeThread(HTHREAD hTrd); //return
                                 -1=error

   56                                   PUBLIC  SuspendThread     //int
                                 SuspendThread(HTHREAD hTrd);//return
                                 -1=error

   57                                   PUBLIC  call_set_suspend

   58                                   PUBLIC  call_set_sleep

   59                                   PUBLIC  call_GetThreadId     //int
                                 call_GetThreadId(HTHREAD hTrd);//return
                                 -1=error

   60                                   PUBLIC  call_GetThreadHandle //HTHREAD
                                 call_GetThreadHandle(int id);//return
                                 -1=error

   61                                   PUBLIC  ExitThread //int ExitThread(in
                                t)завершение текущего потока сзаданным кодом
                                 возврата

   62                                   

   63                                   PUBLIC  call_add_core_obj

   64                                   PUBLIC  call_save_thread_sync_paramete
                                rs

   65                                   PUBLIC  call_rls_object

   66                                   PUBLIC  call_change_core_object_flags

   67                                   PUBLIC  call_CloseHandle

   68                                   PUBLIC  call_SW_thread  //переключить
                                   - core_a -                         Page   13

                                 поток

   69                                   PUBLIC  call_find_handle

   70                                   

   71                                   PUBLIC  tfunc_wrapper //обертка
                                 функции потока

   72                                   PUBLIC  twrap_del     //удаление
                                 функции потока

   73                           //-----------EXPORT VARIABLES-----------------
                                -----        

   74                                   PUBLIC  pctcon    //текущий контекст

   75                                   PUBLIC  _proot_   //anchor of
                                 list,root coreobj* 

   76                                   PUBLIC  _pend_    //end of list

   77                                   PUBLIC  _otot_    //total objects

   78                                   PUBLIC   _ccyc_

   79                                           

   80                                   PUBLIC  SystemTicks //sys timer
                                 inc.val

   81                                   PUBLIC  tswFLdis0   //SW flags

   82                                   

   83                           #if CORE_DBG_OPERATION==1

   86                           #endif

   87                                   //===ФУНКЦИИ СИСТЕМНОГО ТАЙМЕРА===

   88                                   PUBLIC  call_RestartSystemTimer
                                 

   89                                   PUBLIC  call_DeleteSystemTimer

   90                                   PUBLIC  call_PauseSystemTimer

   91                                   PUBLIC  call_ResumeSystemTimer

   92                                   PUBLIC  call_IsSystemTimerCounterNull

   93                                   PUBLIC  call_IsSystemTimer

   94                                   //==Флаги блокировок====

   95                                   PUBLIC  _mm_flag_lock_     //volatile
                                 unsigned char,memory manager lock flag
                                 

   96                                   PUBLIC _core_flag_lock     //volatile
                                 unsigned char _core_flag_lock;

   97                                   //PUBLIC _taskList_flag_lock //флаг
                                 блокировки списка задач для синхронизации
                                 доступа

   98                                   //==список задач для выполнения==

   99                                   PUBLIC _taskList_      //volatile
                                 Task* _taskList_ 

  100                           //============================================
                                ==================================

  101                                   SECTION CSTACK:DATA:NOROOT(3)

  102                                   
                                   - core_a -                         Page   14


  103                                   SECTION OS_CORE_DATA:DATA:ROOT(4)   
                                 //ALIGN 4

  104                           //------

  105    00000000 00000000      _proot_         DCD   0   //якорь списка
  объектов ядра

  106    00000004 00000000      _pend_          DCD   0   //конец списка
  объектов ядра

  107    00000008 00000000      _otot_          DCD   0   //количество объектов
  ядра

  108                           

  109    0000000C 00000000      pctcon          DCD   0   //текущий поток
  

  110                           

  111    00000010 00000000      _taskList_      DCD   0   //список задач для
  обработки , volatile Task* _taskList_ 

  112                           //--------------------------------------------
                                ----------------------------------  

  113    00000014 00000000      SystemTicks     DCD   0   //счетчик импульсов
  таймера переключения контекстов (1 мс)

  114                           //--------------------------------------------
                                ----------------------------------  

  115    00000018 00000000      tswFLdis0       DCD   0 //0   //флаги
  переключения

  116                           /* биты :

  117                           [0] == 1-запрет переключения 

  118                           [1] == 2-пропуск одного переключения

  119                           */

  120    0000001C 05            _ccyc_          DCB  TSV_TIMx_CYCLES   //
  циклов до переключения

  121                           //--------------------------------------------
                                -------------

  122    0000001D 00            _mm_flag_lock_      DCB   0 //флаг блокировки
  менеджера памяти

  123                           /*

  124                           флаг блокирования для выявления доступа более
                                 приоритетного прерывания

  125                           (вызовет зависание,т.к. доступ имеет только
                                 ядро)

  126                           */

  127    0000001E 00            _core_flag_lock     DCB  0 //static volatile
  unsigned char _core_flag_lock=0;

  128                           

  129                           //флаг блокировки списка задач для синхронизац
                                ии доступа

  130                           //_taskList_flag_lock DCB  0 //static volatile
                                 unsigned char _core_flag_lock=0;

  131                            //-------------------------------------------
                                --------------

                                   - core_a -                         Page   15

  132                            #if CORE_DBG_OPERATION==1

  136                           #endif

  137                           //--------------------------------------------
                                -------------

  138    0000001F 00                    THUMB

  139                           //=========================сброс,инициализация
                                ==================================

  140                                   SECTION OS_CORE:CODE(2)

  141                            #if CORE_DBG_OPERATION==1

  157                           #else

  158                           _save_op  MACRO _numop_

  159                                     ENDM

  160                           #endif       

  161                           

  162                           

  163                           Reset_Handler

  164    00000000 DFF8B001              LDR.W   R0, =SystemInit

  165    00000004 8047                  BLX     R0

  166                              

  167                                   //LDR     R0, =init_sheduler

  168                                   //LDR     R0, =__iar_program_start

  169                                   //BX      R0

  170                                   

  171                           init_sheduler:           

  172                            /*

  173                            __iar_program_start инициализация глобальных
                                 переменных и библиотек

  174                            инициализация констант ассемблера в
                                 __low_lewel_init

  175                            инициализация глобальных структур C в
                                 __iar_data_init3

  176                           */     

  177                                   //инициализация массивов и переменных

  178    00000006 ........              BL  __low_level_init

  179    0000000A 0028                  CMP R0,#0

  180    0000000C 01D0                  BEQ _init_root_

  181    0000000E ........              BL  __iar_data_init3 //инициализация
                                             глобальных переменных и массивов

  182                                   //-----выравнивание стека------

  183                                   //LDR R2, =SBC_CCR_REG //=0xE000ED14
                                 

  184                                   //LDR R0,[R2]

  185                                   //BIC R0,R0,#0x200 //0x200 = 8b align
                                   - core_a -                         Page   16

                                 else 4b align

  186                                   //STR R0,[R2]

  187                                   //LDR R0,[R2]

  188                                   //AND R0,R0,#(STKALIGN_VAL) 

  189                                   //-----

  190                           //================= запуск корневого потока
                                 (+планировщик)======================         
                                 

  191                           /*

  192                           1)используйте инструкцию MSR CONTROL,чтобы
                                 установить бит активного указателя стека в
                                 1,

  193                           2) выполнить возврат исключения в режим Thread
                                 с соответствующим EXC_RETURN

  194                           -При изменении указателя стека программное
                                 обеспечение должно использовать инструкцию ISB
                                 сразу после

  195                           инструкции MSR. Это гарантирует, что
                                 инструкции после ISB используют новый
                                 указатель стека

  196                           */

  197                           _init_root_:  

  198                           //CONTROL:4=use FPU,2=use PSP,1=unprivileged
                                 mode

  199                           

  200                           #if ENABLE_USE_FPU==1

  201    00000012 ........              BL __iar_init_vfp  //FPU init         
                                            

  202                           #endif          

  203                                   //B main

  204    00000016 ........              BL InitSheduler //init sys timer and
                                            root thread

  205                                   

  206                                   

  207    0000001A 6749                  LDR R1,=_proot_

  208    0000001C 0968                  LDR R1,[R1]

  209    0000001E 674A                  LDR R2,=pctcon

  210    00000020 1160                  STR R1,[R2]

  211    00000022 674B                  LDR R3,=_pend_

  212    00000024 1960                  STR R1,[R3]

  213                           

  214                                   

  215                                           //-------------------

  216                                           //подготовка стека и режима
                                 доступа

  217    00000026 0869                          LDR R0,[R1,#offs_mode]
                                   - core_a -                         Page   17


  218                                   //PRIV? (CONTROL 0=PRIV/1=NO_PRIV)

  219    00000028 EFF31483              MRS R3,CONTROL

  220    0000002C 23F00703              AND R3,R3,#(~7) //1=NPRIV 2=PSP
                                             4=FPU

  221    00000030 10F00102              ANDS R2,R0,#TM_NPRIV

  222    00000034 18BF                  IT NE

  223    00000036 43F00103                ORRNE R3,R3,#1 //NPRIV

  224    0000003A 10F00202              ANDS R2,R0,#TM_PSP

  225    0000003E 18BF                  IT NE

  226    00000040 43F00203                ORRNE R3,R3,#2

  227                           

  228                           #if ENABLE_USE_FPU

  229    00000044 10F00402              ANDS R2,R0,#TM_FPU

  230    00000048 18BF                  IT NE

  231    0000004A 43F00403                ORRNE R3,R3,#4

  232                           #endif

  233                           

  234    0000004E 8869                  LDR R0,[R1,#offs_tstack_PSP]

  235    00000050 80F30988              MSR PSP,R0//установить стек

  236                           

  237    00000054 83F31488              MSR CONTROL,R3 //1=NPRIV 2=PSP
                                             4=FPU

  238    00000058 BFF36F8F                          ISB           //сброс
                                                                   конвеера
                                                                   инструкций

  239                                   

  240                           #if ENABLE_MULTITHREADING==1

  241    0000005C ........                          BL start_svc

  242                           #endif                

  243    00000060 ........              BL main

  244                                   

  245    00000064 00E0                  B twrap_del

  246                           //========================обертка функции
                                 потока================================
                                 

  247                           //выполнение функции потока и зачистка по
                                 завершению,возврат результата в R0

  248                           //R1=func R0=arg R2=ctx

  249                           tfunc_wrapper:

  250    00000066 8847             BLX R1 

  251                              //R0==значение возврата потока

  252                           twrap_del: 

                                   - core_a -                         Page   18

  253    00000068 544A             LDR R2,=pctcon //текущий

  254    0000006A 0446             MOV R4,R0

  255    0000006C 1068             LDR R0,[R2] //R0=удаляемый контекст

  256                              //---------

  257    0000006E 00DF             SVC #0//R4==удаляемый контекст

  258                              

  259    00000070 2046             MOV R0,R4 //ret val

  260                              //удаленный поток выйдет из цикла при
                                 переключении контекстов

  261                           twrap_ret:

  262                              //WFI

  263    00000072 FEE7             B twrap_ret//led_loop

  264                           //================= системный таймер+переключе
                                ния контекстов ===================

  265                           //вызывается каждую миллисекунду

  266                           

  267                           TSV_TIMER_IRQ_HNDLR:

  268                           

  269    00000074 07B5            PUSH {R0-R2,LR}

  270                             //TIM2->SR &= (uint16_t)~TIM_SR_UIF;// Clear
                                 the IT update pending Bit

  271    00000076 534A            LDR.N     R2, =(TSV_TIMER_BASE_ADR+TIMx_SR_OF
                                      FSET)

  272    00000078 1088            LDRH      R0, [R2]

  273    0000007A 4FF6FE71        MOVW      R1, #0xfffe

  274    0000007E 0840            ANDS      R0, R0, R1

  275    00000080 1080            STRH      R0, [R2]

  276                             

  277    00000082 5149            LDR R1,=SystemTicks //++

  278    00000084 0868            LDR R0,[R1]

  279    00000086 00F10100        ADD R0,R0,#1

  280    0000008A 0860            STR R0,[R1]

  281                             //----цикл по всем объектам ------

  282                             //функции таймеров выполняются с высшим
                                 приоритетом.

  283    0000008C ........        BL _ts_scan_core_obj //synс.c

  284                             //-------------------------------------

  285                           #if ENABLE_MULTITHREADING==0

  287                           #endif

  288                             

  289    00000090 01B4            PUSH {R0} //PEND ?

  290                             
                                   - core_a -                         Page   19


  291    00000092 ........        BL core_scan_tasklist

  292                             

  293    00000096 08BC            POP {R3}

  294                             

  295                           ttt_chdis0:

  296    00000098 4C48            LDR R0,=tswFLdis0 //флаги ядра

  297    0000009A 0168            LDR R1,[R0]

  298    0000009C 01F00101        AND R1,R1,#1

  299    000000A0 0129            CMP R1,#1

  300    000000A2 25D0            BEQ.N ttt_ret //1 = запрет переключения

  301                             //---------проверка на ожидающий----------

  302    000000A4 002B            CMP R3,#0

  303    000000A6 04D0            BEQ.N ttt_no_pend

  304                             //ITTT NE

  305    000000A8 BDE80740          POP {R0-R2,LR} 

  306    000000AC 1846              MOV R0,R3

  307    000000AE ........          B _psw_switch_threads_context_to_R0

  308                             //----------------------------------------

  309                           ttt_no_pend:  

  310    000000B2 4748            LDR   R0,=_ccyc_

  311    000000B4 0178            LDRB   R1,[R0]

  312    000000B6 A1F10101        SUB  R1,R1,#1

  313    000000BA 0029            CMP   R1,#0

  314    000000BC 1CBF            ITT   NE

  315    000000BE 0170              STRBNE R1,[R0]

  316    000000C0 16E0              BNE.N ttt_ret //цикл не пройден 

  317                             //цикл пройден,смена контекстов

  318    000000C2 4FF00501        MOV  R1,#(TSV_TIMx_CYCLES)

  319    000000C6 0170            STRB R1,[R0]

  320                             

  321                             //требуется ли пропустить переключение
                                 контекстов ?

  322    000000C8 4048            LDR R0,=tswFLdis0

  323    000000CA 0168            LDR R1,[R0]

  324    000000CC 01F00202        AND R2,R1,#2 //пропуск?

  325    000000D0 21F00201        AND R1,R1,#0xFFFFFFFD //сброс пропуска

  326    000000D4 0160            STR R1,[R0]

  327    000000D6 5AB9            CBNZ R2,ttt_ret //2 = требуется пропуск

  328                             

                                   - core_a -                         Page   20

  329    000000D8 3848            LDR R0,=pctcon //текущий

  330    000000DA 0068            LDR R0,[R0]

  331    000000DC D0F81010        LDR.W R1,[R0,#offs_mode] 

  332    000000E0 01F48071        AND.W R1,R1,#(TCRITSECT_Msk)

  333    000000E4 21B9            CBNZ R1,ttt_ret //PC в критической секции

  334                             //---переключение контекста-------------

  335    000000E6 3B48            LDR R0,=(SCB_BASE+SCB_ICSR_OFFSET)

  336    000000E8 0168            LDR R1,[R0]

  337    000000EA 41F08051        ORR R1,R1,#(SCB_ICSR_PENDSVSET_MskVal)
                                       //установить флаг прерывания PendSV

  338    000000EE 0160            STR R1,[R0]

  339                             //--------------------------------------

  340                           ttt_ret:

  341                             

  342    000000F0 07BD            POP {R0-R2,PC}

  343                           

  344                           //========================функция удаления
                                 потока===============================

  345                           call_delete_thread:

  346    000000F2 00B5              PUSH {LR}

  347    000000F4 00DF              SVC #0 //R0==удаляемый контекст

  348    000000F6 00BD              POP {PC}

  349                           //=============функция изменения приоритета
                                 потока==============================

  350                           //int call_get_set_thread_prio(HTHREAD
                                 pCTX_R0,uint8_t priority_R1,HTHREAD ht_R2,uint
                                8_t bget_set_R3);//+

  351                           call_get_set_thread_prio:

  352    000000F8 00B5              PUSH {LR}

  353    000000FA 03DF              SVC #3 //R0=pctx R1=prio R2=stack out ctx,
                                         R3=0==get/1==set

  354    000000FC 00BD              POP {PC}

  355                           //=================== приостановить поток R0
                                 на R1 ms ========================== 
                                 

  356                           //если R0==0-загрузить в R0 текущий поток

  357                           call_set_sleep:

  358    000000FE 00B5            PUSH {LR}

  359                             _save_op 30 

  359.1                                   ENDM

  360    00000100 06DF            SVC #6

  361    00000102 00BD            POP {PC}

  362                           //================= установки маски suspend R1
                                 потока R0 ======================= 
                                   - core_a -                         Page   21


  363                           //если R0==0-загрузить в R0 текущий поток

  364                           ResumeThread:

  365    00000104 4FF00001        MOV R1,#0

  366                             _save_op 31 

  366.1                                   ENDM

  367    00000108 01E0            B call_set_suspend

  368                           SuspendThread:

  369                             _save_op 32 

  369.1                                   ENDM

  370    0000010A 4FF40071        MOV R1,#(TM_CREATE_SUSPENDED)

  371                           call_set_suspend:

  372    0000010E 00B5            PUSH {LR}

  373    00000110 07DF            SVC #7

  374    00000112 00BD            POP {PC}

  375                           //================= вернуть ID потока R0
                                 =======================================
                                 

  376                           //если R0==0-загрузить в R0 HTHREAD текущего
                                 потока (поиск по HTHREAD)

  377                           call_GetThreadId:

  378    00000114 00B5            PUSH {LR}

  379    00000116 0ADF            SVC #10

  380    00000118 00BD            POP {PC}

  381                           //================= вернуть HTHREAD потока с
                                 ID==R0 ============================

  382                           //если R0==0-загрузить в R0 ID текущeго потока
                                 (поиск по ID)

  383                           call_GetThreadHandle:

  384    0000011A 00B5            PUSH {LR}

  385    0000011C 0BDF            SVC #11

  386    0000011E 00BD            POP {PC}

  387                           //================= подключить объект к списку
                                 =================================

  388                           //R0=объект для подключения

  389                           call_add_core_obj:

  390    00000120 00B5            PUSH {LR}

  391                             _save_op 33 

  391.1                                   ENDM

  392    00000122 01DF            SVC #1

  393    00000124 00BD            POP {PC}

  394                           //=== завершить текущий поток с заданным кодом
                                 возврата (R0)====================

                                   - core_a -                         Page   22

  395                           ExitThread:

  396    00000126 FFF79FFF        BL twrap_del

  397                           //===========запись параметров синхронизации в
                                 контекст потока==================   

  398                           call_save_thread_sync_parameters:

  399    0000012A 00B5            PUSH {LR}

  400                             _save_op 34 

  400.1                                   ENDM

  401    0000012C 13DF            SVC #19

  402    0000012E 00BD            POP {PC}

  403                           //=========================освободить
                                 объект====================================  
                                 

  404                           //BOOL call_rls_object(HANDLE pco_R0,HTHREAD
                                 ht_R1)

  405                           call_rls_object:

  406    00000130 00B5            PUSH {LR}

  407                             _save_op 35 

  407.1                                   ENDM

  408    00000132 14DF            SVC #20

  409    00000134 00BD            POP {PC}

  410                           //====================изменить флаги объекта
                                 ядра===============================

  411                           //R0=объект ядра R1=(uint16_t)flags R2=SET/RES
                                ET

  412                           call_change_core_object_flags:  

  413    00000136 00B5            PUSH {LR}

  414                             _save_op 36 

  414.1                                   ENDM

  415    00000138 15DF            SVC #21

  416    0000013A 00BD            POP {PC}

  417                           //====================освободить ресурсы
                                 дескриптора============================ 
                                 

  418                           call_CloseHandle: 

  419    0000013C 00B5            PUSH {LR}

  420                             _save_op 37 

  420.1                                   ENDM

  421    0000013E 16DF            SVC #22

  422    00000140 00BD            POP {PC}

  423                           //===============принудительное переключение
                                 контекста========================== 

  424                           call_SW_thread: 

  425    00000142 00B5            PUSH {LR}
                                   - core_a -                         Page   23


  426    00000144 02DF            SVC #2

  427    00000146 00BD            POP {PC}

  428                           //======================поиск объекта=========
                                ================================== 

  429                           call_find_handle: 

  430    00000148 00B5            PUSH {LR}

  431                             _save_op 38 

  431.1                                   ENDM

  432    0000014A 17DF            SVC #23

  433    0000014C 00BD            POP {PC}

  434                           //======================ФУНКЦИИ СИСТЕМНОГО
                                 ТАЙМЕРА==============================

  435                           call_RestartSystemTimer: 

  436    0000014E 00B5            PUSH {LR}

  437                             _save_op 39 

  437.1                                   ENDM

  438    00000150 18DF            SVC #24 

  439    00000152 00BD            POP {PC}

  440                             

  441                           call_DeleteSystemTimer:

  442    00000154 00B5            PUSH {LR}

  443                             _save_op 40 

  443.1                                   ENDM

  444    00000156 19DF            SVC #25

  445    00000158 00BD            POP {PC}

  446                             

  447                           call_PauseSystemTimer:

  448    0000015A 00B5            PUSH {LR}

  449                             _save_op 41 

  449.1                                   ENDM

  450    0000015C 1ADF            SVC #26

  451    0000015E 00BD            POP {PC}

  452                           call_ResumeSystemTimer:

  453    00000160 00B5            PUSH {LR}

  454                             _save_op 42 

  454.1                                   ENDM

  455    00000162 1BDF            SVC #27

  456    00000164 00BD            POP {PC}

  457                           call_IsSystemTimerCounterNull:

  458    00000166 00B5            PUSH {LR}
                                   - core_a -                         Page   24


  459                             _save_op 43 

  459.1                                   ENDM

  460    00000168 1CDF            SVC #28

  461    0000016A 00BD            POP {PC}

  462                           call_IsSystemTimer:

  463    0000016C 00B5            PUSH {LR}

  464                             _save_op 44 

  464.1                                   ENDM

  465    0000016E 1DDF            SVC #29

  466    00000170 00BD            POP {PC}

  467                           //============================================
                                =================================

  468                           /*

  469                           создание нового потока (процесса)  

  470                           R0==param {+0:(uint32_t)pFunc,+4:(uint32_t)pAr
                                gs,+8:(uint32_t)pCTX}; (в стеке)

  471                                   //[17FPU regs] PSR PC LR R12 R3 R2 R1
                                 R0       

  472                           */

  473                           call_create_new_thread:

  474    00000172 00B5            PUSH {LR}

  475                             _save_op 45 

  475.1                                   ENDM

  476    00000174 1FDF            SVC #31

  477    00000176 00BD            POP {PC}

  478                           //============================================
                                =================================  

  479                           HardFault_Handler:

  480    00000178 02E0            B.N UsageFault_Handler//HardFault_Handler
                                        //UsageFault_Handler

  481                           HF_LOOP:

  482    0000017A FEE7            B.N HF_LOOP

  483                           /*

  484                           BusFault: обнаруживает ошибки доступа к памяти
                                 при извлечении команды,

  485                           считывание / запись данных, выборка прерывания
                                ,

  486                           и записывать стекирование (сохранение /
                                 восстановление)

  487                           при прерывании (ввод / вывод).  

  488                           */

  489                           BusFault_Handler:

  490                             //B.N _check_current_IT
                                   - core_a -                         Page   25


  491    0000017C 00E0            B.N UsageFault_Handler //UsageFault_Handler

  492                           //BF_LOOP:

  493                             //B.N BF_LOOP

  494                           

  495                           MemManage_Handler:

  496    0000017E FFE7            B.N UsageFault_Handler //UsageFault_Handler

  497                           

  498                           UsageFault_Handler:

  499                             

  500    00000180 1EF0040F        TST   LR, #4        //EXC_RETURN (bit
                                         2)?

  501    00000184 0CBF            ITE   EQ            //if Z - MSP else
                                         PSP

  502    00000186 EFF3088C        MRSEQ R12, MSP       //MSP->R0

  503    0000018A EFF3098C        MRSNE R12, PSP       //PSP->R0 (bit
                                         set)

  504                             //извлечь параметры: в стеке PSR PC LR R12
                                 R3 R2 R1 R0

  505    0000018E 9CE80F00        LDM R12, {R0-R3}

  506    00000192 DCF818C0        LDR R12, [R12,#24]    //извлечь PC из
                                       стека

  507                             

  508    00000196 094C            LDR R4, =pctcon           //указатель на
                                            контекст

  509    00000198 2468            LDR R4,[R4]               //значение
                                       указателя

  510    0000019A E569            LDR R5,[R4,#offs_tstaRAM_PSP] //низ
                                       стека

  511    0000019C 266A            LDR R6,[R4,#offs_tstsize_PSP] 

  512    0000019E A769            LDR R7,[R4,#offs_tstack_PSP]

  513    000001A0 D4F81080        LDR R8,[R4,#offs_mode]

  514                             

  515    000001A4 D4F81490        LDR R9, [R4,#offs_id]

  516                             

  517                           UF_LOOP:

  518    000001A8 FEE7            B.N UF_LOOP

  519                             //BX LR

  520                           //============================================
                                =================================  

  521                           _check_current_IT:

  522                              // Загрузите адрес регистра управления
                                 прерываниями в r3.  

  523    000001AA DFF82830         LDR.W  R3,=(NVIC_INT_CTRL_CONST) //LDR.W R3,
                                        #(0xE000ED04) //NVIC_INT_CTRL_CONST

                                   - core_a -                         Page   26

  524                           // Загрузите значение регистра управления
                                 прерываниями в r2 из 

  525                           //адреса, хранящегося в r3.  * /

  526    000001AE 1A68             ldr r2, [r3, # 0]

  527                           // Номер прерывания находится в младшем
                                 значении байта - очистить все 

  528                           //другие биты. 

  529    000001B0 D2B2             uxtb r2, r2

  530                           Infinite_Loop:

  531                              // Теперь сидите в бесконечном цикле -
                                 номер исполняемого прерывания 

  532                              // проводится в r2.  

  533    000001B2 FEE7             b Infinite_Loop

  534                              //.size Default_Handler,.-Default_Handler

  535                           

  536                            //.align 4

  537                            // Адрес регистра управления прерываниями
                                 NVIC.  

  538                            //NVIC_INT_CTRL_CONST: .word 0xe000ed04

  539                           //============================================
                                ================================= 

  539.1                                  TABLE

  539.2  000001B4 ........              Reference on line 164

  539.3  000001B8 ........              Reference on line 207

  539.4  000001BC ........              Reference on line 209,253,329,508

  539.5  000001C0 ........              Reference on line 211

  539.6  000001C4 10000040              Reference on line 271

  539.7  000001C8 ........              Reference on line 277

  539.8  000001CC ........              Reference on line 296,322

  539.9  000001D0 ........              Reference on line 310

  539.10 000001D4 04ED00E0              Reference on line 335,523

  540                             END





EOF                  DELIMITER 

\n                   DELIMITER 

                     DELIMITER 

!                    OPERATOR 

!=                   OPERATOR 

%                    OPERATOR 

&                    OPERATOR 

&&                   OPERATOR 
                                   - core_a -                         Page   27


(                    OPERATOR 

(                    DELIMITER 

)                    OPERATOR 

)                    DELIMITER 

*                    OPERATOR 

+                    OPERATOR 

,                    DELIMITER 

-                    OPERATOR 

.                    Target symbol: 24 

/                    OPERATOR 

/                    DELIMITER 

:                    Target symbol: 22 

:                    DELIMITER 

;                    Target symbol: 23 

<                    OPERATOR 

<<                   OPERATOR 

<=                   OPERATOR 

<>                   OPERATOR 

=                    OPERATOR 

=                    DIRECTIVE 

==                   OPERATOR 

>                    OPERATOR 

>=                   OPERATOR 

>>                   OPERATOR 

@                    DELIMITER 

AAPCS                DIRECTIVE 

ACTLR_OFFSET         #define, value: 0x008, line:     234:1  

ALIAS                DIRECTIVE 

ALIGN                DIRECTIVE 

ALIGNRAM             DIRECTIVE 

ALIGNROM             DIRECTIVE 

ANOTE                DIRECTIVE 

APSR_NZCV            REGISTER 

ARGFRAME             DIRECTIVE 

ARM                  DIRECTIVE 

ASEGN                DIRECTIVE 

ASR                  MNEMONIC 

BIT                  SEGMENT TYPE 

BYTE1                OPERATOR 
                                   - core_a -                         Page   28


BYTE2                OPERATOR 

BYTE3                OPERATOR 

BYTE4                OPERATOR 

C0                   REGISTER 

C1                   REGISTER 

C10                  REGISTER 

C11                  REGISTER 

C12                  REGISTER 

C13                  REGISTER 

C14                  REGISTER 

C15                  REGISTER 

C2                   REGISTER 

C3                   REGISTER 

C4                   REGISTER 

C5                   REGISTER 

C6                   REGISTER 

C7                   REGISTER 

C8                   REGISTER 

C9                   REGISTER 

CALL_GRAPH_ROOT      DIRECTIVE 

CASEOFF              DIRECTIVE 

CASEON               DIRECTIVE 

CBREL                OPERATOR 

CBREL_NEAR           OPERATOR 

CFI                  DIRECTIVE 

CF_ABANDONED         #define, value: 0x4000, line:     221:1  

CF_AUTORESET         #define, value: 8, line:     214:1  

CF_CAPTSTATE         #define, value: 0x2000, line:     220:1  

CF_PASSIVE           #define, value: 0, line:     208:1  

CF_PLAIN             #define, value: 0, line:     216:1  

CF_RECURSIVE         #define, value: 16, line:     217:1  

CF_SIGNAL            #define, value: 1, line:     209:1  

CF_TIMED             #define, value: 32, line:     218:1  

CF_TIMEOUT           #define, value: 0x8000, line:     222:1  

CF_WAIT_ALL          #define, value: 2, line:     211:1  

CF_WAIT_MULTIPLE     #define, value: 4, line:     212:1  

CODE                 SEGMENT TYPE 

CODE                 DIRECTIVE 

CODE16               DIRECTIVE 
                                   - core_a -                         Page   29


CODE32               DIRECTIVE 

COL                  DIRECTIVE 

CONST                SEGMENT TYPE 

CORE_DBG_LEN         #define, value: 8, line:      26:1  

CORE_DBG_OPERATION   #define, value: 0, line:      25:1         83      132      141

CORE_IT_PRIO_GROUP   #define, value: 3, line:      34:1  

CORE_MPU_PROTECTION  #define, value: 0, line:      18:1  

CORE_NVIC_PriorityGroup #define, value: NVIC_PriorityGroup_2, line:      33:1  

CoreDebug_BASE       #define, value: (0xE000EDF0UL), line:     227:1  

D0                   REGISTER 

D1                   REGISTER 

D10                  REGISTER 

D11                  REGISTER 

D12                  REGISTER 

D13                  REGISTER 

D14                  REGISTER 

D15                  REGISTER 

D2                   REGISTER 

D3                   REGISTER 

D4                   REGISTER 

D5                   REGISTER 

D6                   REGISTER 

D7                   REGISTER 

D8                   REGISTER 

D9                   REGISTER 

DATA                 SEGMENT TYPE 

DATA                 DIRECTIVE 

DATE                 OPERATOR 

DC16                 DIRECTIVE 

DC24                 DIRECTIVE 

DC32                 DIRECTIVE 

DC8                  DIRECTIVE 

DCB                  DIRECTIVE 

DCD                  DIRECTIVE 

DCREL32              DIRECTIVE 

DCW                  DIRECTIVE 

DEFAULT_TSTACK_SIZE  #define, value: 0x1000, line:      21:1  

DEFINE               DIRECTIVE 

DF32                 DIRECTIVE 
                                   - core_a -                         Page   30


DF64                 DIRECTIVE 

DISABLE_MCU_BUFFERING_MODE #define, value: 0, line:      17:1  

DS16                 DIRECTIVE 

DS24                 DIRECTIVE 

DS32                 DIRECTIVE 

DS8                  DIRECTIVE 

ELSE                 DIRECTIVE 

ELSEIF               DIRECTIVE 

ENABLE_MULTITHREADING #define, value: 1, line:      16:1        240      285

ENABLE_STACK_CHECK_DEBUG #define, value: 0, line:      24:1  

ENABLE_USE_FPU       #define, value: 1, line:      15:1        200      228

END                  DIRECTIVE 

ENDIF                DIRECTIVE 

ENDM                 DIRECTIVE 

ENDMOD               DIRECTIVE 

ENDR                 DIRECTIVE 

EQU                  DIRECTIVE 

ERR_EXC_RET          #define, value: 1, line:     267:1  

ERR_IT_STATE         #define, value: 64, line:     275:1  

ERR_LO_STACK_LIM     #define, value: 4, line:     271:1  

ERR_NOT_FOUND        #define, value: 16, line:     273:1  

ERR_OUT_OF_MEMORY    #define, value: 32, line:     274:1  

ERR_STACK_LIM        #define, value: 6, line:     269:1  

ERR_UP_STACK_LIM     #define, value: 2, line:     270:1  

ERR_ZERO_PTR         #define, value: 8, line:     272:1  

EVEN                 DIRECTIVE 

EXCEPTION_CODE       DIRECTIVE 

EXC_RET_BASE         #define, value: 0xFFFFFFE1, line:     121:1  

EXC_RET_HALDLER      #define, value: 0, line:     130:1  

EXC_RET_HALDLER_MSP  #define, value: 0xFFFFFFF1, line:     123:1  

EXC_RET_MSP          #define, value: 0, line:     127:1  

EXC_RET_NOFPU        #define, value: 16, line:     133:1  

EXC_RET_PSP          #define, value: 4, line:     128:1  

EXC_RET_THREAD       #define, value: 8, line:     131:1  

EXC_RET_THREAD_MSP   #define, value: 0xFFFFFFF9, line:     124:1  

EXC_RET_THREAD_PSP   #define, value: 0xFFFFFFFB, line:     125:1  

EXC_RET_USEFPU       #define, value: 0, line:     134:1  

EXC_RET_USE_BITMSK   #define, value: 0x1F, line:     119:1  

EXITM                DIRECTIVE 
                                   - core_a -                         Page   31


EXPORT               DIRECTIVE 

EXTERN               DIRECTIVE 

EXTWEAK              DIRECTIVE 

FAR                  SEGMENT TYPE 

FARCODE              SEGMENT TYPE 

FARCONST             SEGMENT TYPE 

FARDATA              SEGMENT TYPE 

FPEXC                REGISTER 

FPINST               REGISTER 

FPINST2              REGISTER 

FPSCR                REGISTER 

FPSID                REGISTER 

FUNCALL              DIRECTIVE 

FUNCTION             DIRECTIVE 

HIGH                 OPERATOR 

HUGE                 SEGMENT TYPE 

HUGECODE             SEGMENT TYPE 

HUGECONST            SEGMENT TYPE 

HUGEDATA             SEGMENT TYPE 

HWRD                 OPERATOR 

ICTR_OFFSET          #define, value: 0x004, line:     233:1  

IDATA                SEGMENT TYPE 

IF                   DIRECTIVE 

IMPORT               DIRECTIVE 

INCLUDE              DIRECTIVE 

INFINITE             #define, value: (0xFFFFFFFFUL), line:     279:1  

ITM_BASE             #define, value: (0xE0000000UL), line:     226:1  

LIBRARY              DIRECTIVE 

LOCAL                DIRECTIVE 

LOCFRAME             DIRECTIVE 

LOW                  OPERATOR 

LR                   REGISTER 

LSL                  MNEMONIC 

LSR                  MNEMONIC 

LSTCND               DIRECTIVE 

LSTCOD               DIRECTIVE 

LSTEXP               DIRECTIVE 

LSTMAC               DIRECTIVE 

LSTOUT               DIRECTIVE 
                                   - core_a -                         Page   32


LSTPAG               DIRECTIVE 

LSTREP               DIRECTIVE 

LSTXRF               DIRECTIVE 

LTORG                DIRECTIVE 

LWRD                 OPERATOR 

MACRO                DIRECTIVE 

MAX_MSP_STACK_TOP    #define, value: 0x200FFFFF, line:      20:1  

MODULE               DIRECTIVE 

MVFR0                REGISTER 

MVFR1                REGISTER 

NAME                 DIRECTIVE 

NEAR                 SEGMENT TYPE 

NEARCODE             SEGMENT TYPE 

NEARCONST            SEGMENT TYPE 

NEARDATA             SEGMENT TYPE 

NOALLOC              SEGMENT TYPE 

NOCALL               DIRECTIVE 

NOROOT               SEGMENT TYPE 

NPAGE                SEGMENT TYPE 

NVIC_BASE            #define, value: (SCS_BASE + 0x0100UL), line:     229:1  

NVIC_BASE_ADR        #define, value: 0xE000E100, line:     144:1  

NVIC_INT_CTRL_CONST  #define, value: 0xE000ED04, line:     282:1        523

NVIC_PriorityGroup_2 Target symbol: 0 

ODD                  DIRECTIVE 

P0                   REGISTER 

P1                   REGISTER 

P10                  REGISTER 

P11                  REGISTER 

P12                  REGISTER 

P13                  REGISTER 

P14                  REGISTER 

P15                  REGISTER 

P2                   REGISTER 

P3                   REGISTER 

P4                   REGISTER 

P5                   REGISTER 

P6                   REGISTER 

P7                   REGISTER 

P8                   REGISTER 
                                   - core_a -                         Page   33


P9                   REGISTER 

PAGE                 DIRECTIVE 

PAGSIZ               DIRECTIVE 

PC                   REGISTER 

PRESERVE8            DIRECTIVE 

PROGRAM              DIRECTIVE 

PUBLIC               DIRECTIVE 

PUBWEAK              DIRECTIVE 

R0                   REGISTER 

R1                   REGISTER 

R10                  REGISTER 

R11                  REGISTER 

R12                  REGISTER 

R13                  REGISTER 

R14                  REGISTER 

R15                  REGISTER 

R2                   REGISTER 

R3                   REGISTER 

R4                   REGISTER 

R5                   REGISTER 

R6                   REGISTER 

R7                   REGISTER 

R8                   REGISTER 

R9                   REGISTER 

RADIX                DIRECTIVE 

RCC_APB1PeriphClockCmd Target symbol: 0 

RCC_APB1Periph_TIM2  Target symbol: 0 

REGISTER             SEGMENT TYPE 

RELOC_ARM_PREL31     OPERATOR 

RELOC_ARM_TARGET1    OPERATOR 

RELOC_ARM_TARGET2    OPERATOR 

RELOC_LOCAL          OPERATOR 

REORDER              SEGMENT TYPE 

REPT                 DIRECTIVE 

REPTC                DIRECTIVE 

REPTI                DIRECTIVE 

REQUIRE              DIRECTIVE 

REQUIRE8             DIRECTIVE 

ROOT                 SEGMENT TYPE 
                                   - core_a -                         Page   34


ROR                  MNEMONIC 

RRX                  MNEMONIC 

RSEG                 DIRECTIVE 

RTMODEL              DIRECTIVE 

S0                   REGISTER 

S1                   REGISTER 

S10                  REGISTER 

S11                  REGISTER 

S12                  REGISTER 

S13                  REGISTER 

S14                  REGISTER 

S15                  REGISTER 

S16                  REGISTER 

S17                  REGISTER 

S18                  REGISTER 

S19                  REGISTER 

S2                   REGISTER 

S20                  REGISTER 

S21                  REGISTER 

S22                  REGISTER 

S23                  REGISTER 

S24                  REGISTER 

S25                  REGISTER 

S26                  REGISTER 

S27                  REGISTER 

S28                  REGISTER 

S29                  REGISTER 

S3                   REGISTER 

S30                  REGISTER 

S31                  REGISTER 

S4                   REGISTER 

S5                   REGISTER 

S6                   REGISTER 

S7                   REGISTER 

S8                   REGISTER 

S9                   REGISTER 

SBREL                OPERATOR 

SBREL_NEAR           OPERATOR 

SCB_BASE             #define, value: (SCS_BASE + 0x0D00UL), line:     230:1        335
                                   - core_a -                         Page   35


SCB_CCR_REG          #define, value: 0xE000ED14, line:     251:1  

SCB_ICSR_OFFSET      #define, value: 0x004, line:     259:1        335

SCB_ICSR_PENDSVCLR_BitPos #define, value: 27, line:     264:1  

SCB_ICSR_PENDSVCLR_MskVal #define, value: (1UL << SCB_ICSR_PENDSVCLR_BitPos), line:     265:1  

SCB_ICSR_PENDSVSET_BitPos #define, value: 28, line:     261:1        337

SCB_ICSR_PENDSVSET_MskVal #define, value: (1UL << SCB_ICSR_PENDSVSET_BitPos), line:     262:1        337

SCB_SHCSR_SVCALLPENDED_BitPos #define, value: 15, line:     256:1  

SCB_SHCSR_SVCALLPENDED_MskVal #define, value: (1UL << SCB_SHCSR_SVCALLPENDED_BitPos), line:     257:1  

SCS_BASE             #define, value: (0xE000E000UL), line:     225:1        335

SCnSCB_ACTLR_DISDEFWBUF_BitPos #define, value: 1, line:     237:1  

SCnSCB_ACTLR_DISDEFWBUF_MskVal #define, value: (1UL << SCnSCB_ACTLR_DISDEFWBUF_BitPos), line:     238:1  

SCnSCB_ACTLR_DISMCYCINT_BitPos #define, value: 0, line:     240:1  

SCnSCB_ACTLR_DISMCYCINT_MskVal #define, value: (1UL << SCnSCB_ACTLR_DISMCYCINT_BitPos), line:     241:1  

SECTION              DIRECTIVE 

SECTION_GROUP        DIRECTIVE 

SECTION_LINK         DIRECTIVE 

SECTION_TYPE         DIRECTIVE 

SET                  DIRECTIVE 

SETA                 DIRECTIVE 

SFB                  OPERATOR 

SFE                  OPERATOR 

SFS                  OPERATOR 

SHCSR_OFFSET         #define, value: 0x24, line:     248:1  

SHPR2_OFFSET         #define, value: 0x1C, line:     245:1  

SHPR_OFFSET          #define, value: 0x18, line:     244:1  

SIZEOF               OPERATOR 

SORT                 SEGMENT TYPE 

SP                   REGISTER 

STKALIGN_VAL         #define, value: 0x200, line:     254:1  

SysTick_BASE         #define, value: (SCS_BASE + 0x0010UL), line:     228:1  

TCRITSECT_BIT_Pos    #define, value: 8, line:      69:1        332

TCRITSECT_Msk        #define, value: (1UL << TCRITSECT_BIT_Pos), line:      70:1        332

TFPU_MODE_BIT_Pos    #define, value: 2, line:      63:1        229

TFPU_MODE_Msk        #define, value: (1UL << TFPU_MODE_BIT_Pos), line:      64:1        229

THUMB                DIRECTIVE 

THUMBX               DIRECTIVE 

TIM2                 Target symbol: 0 

TIM2_IRQn            Target symbol: 0 

TIMx_DIER_OFFSET     #define, value: 0x0C, line:     142:1  
                                   - core_a -                         Page   36


TIMx_SR_OFFSET       #define, value: 0x10, line:     141:1        271

TMMRAM_CTX_BIT_Pos   #define, value: 11, line:      79:1  

TMMRAM_CTX_Msk       #define, value: (1UL << TMMRAM_CTX_BIT_Pos), line:      80:1  

TMMRAM_STACK_BIT_Pos #define, value: 12, line:      82:1  

TMMRAM_STACK_Msk     #define, value: (1UL << TMMRAM_STACK_BIT_Pos), line:      83:1  

TM_CREATE_SUSPENDED  #define, value: TSUSPENDED_Msk, line:     102:1        370

TM_FPU               #define, value: TFPU_MODE_Msk, line:     100:1        229

TM_MSP               #define, value: 0, line:      90:1  

TM_NFPU              #define, value: 0, line:      99:1  

TM_NPRIV             #define, value: TPRIV_Msk, line:      88:1        221

TM_PRIV              #define, value: 0, line:      87:1  

TM_PSP               #define, value: TSTACK_MODE_Msk, line:      91:1        224

TM_SET_STACK_SIZE    #define, value: TSTACKSIZE_Msk, line:     103:1  

TPENDSV_IT_PRIO      #define, value: CORE_IT_PRIO_GROUP, line:      48:1  

TPENDSV_IT_PRIO_SUB  #define, value: 2, line:      53:1  

TPRIO_BIT_Pos        #define, value: 3, line:      66:1  

TPRIO_Msk            #define, value: (31UL << TPRIO_BIT_Pos), line:      67:1  

TPRIV_BIT_Pos        #define, value: 0, line:      57:1        221

TPRIV_Msk            #define, value: (1UL << TPRIV_BIT_Pos), line:      58:1        221

TSTACKSIZE_BIT_Pos   #define, value: 10, line:      75:1  

TSTACKSIZE_Msk       #define, value: (1UL << TSTACKSIZE_BIT_Pos), line:      76:1  

TSTACK_MODE_BIT_Pos  #define, value: 1, line:      60:1        224

TSTACK_MODE_Msk      #define, value: (1UL << TSTACK_MODE_BIT_Pos), line:      61:1        224

TSUSPENDED_BIT_Pos   #define, value: 9, line:      72:1        370

TSUSPENDED_Msk       #define, value: (1UL << TSUSPENDED_BIT_Pos), line:      73:1        370

TSVCALL_IT_PRIO      #define, value: CORE_IT_PRIO_GROUP, line:      47:1  

TSVCALL_IT_PRIO_SUB  #define, value: 0, line:      52:1  

TSV_TIMER            #define, value: TIM2, line:     138:1  

TSV_TIMER_APBPeriph  #define, value: RCC_APB1Periph_TIM2, line:     152:1  

TSV_TIMER_ARR_1MS    #define, value: ((uint16_t)42000), line:     154:1  

TSV_TIMER_BASE_ADR   #define, value: 0x40000000, line:     139:1        271

TSV_TIMER_IRQ        #define, value: TIM2_IRQn, line:     156:1  

TSV_TIMER_IRQ_HNDLR  #define, value: TIM2_IRQHandler, line:     157:1         46      267

TSV_TIMER_PSC_1MS    #define, value: ((uint16_t)2), line:     153:1  

TSV_TIMER_RCC_APBCmd #define, value: RCC_APB1PeriphClockCmd, line:     151:1  

TSV_TIME_MS          #define, value: 1, line:      44:1  

TSV_TIM_NVIC_BIT     #define, value: 29, line:     148:1  

TSV_TIM_NVIC_ICER_OFS #define, value: 0x080, line:     147:1  

TSV_TIM_NVIC_ISER_OFS #define, value: 0, line:     146:1  
                                   - core_a -                         Page   37


TSV_TIMx_CYCLES      #define, value: 5, line:      42:1        120      318

TTIMER_IT_PRIO       #define, value: CORE_IT_PRIO_GROUP, line:      46:1  

TTIMER_IT_PRIO_SUB   #define, value: 1, line:      51:1  

TY_ANY               #define, value: 0xFFFF, line:     205:1  

TY_EVENT             #define, value: 3, line:     199:1  

TY_MAX               #define, value: TY_TASK, line:     203:1  

TY_MUTEX             #define, value: 2, line:     198:1  

TY_SEMAPHORE         #define, value: 1, line:     197:1  

TY_SYSTIMER          #define, value: 4, line:     200:1  

TY_TASK              #define, value: 5, line:     201:1  

TY_THREAD            #define, value: 0, line:     196:1  

UGT                  OPERATOR 

ULT                  OPERATOR 

UNTYPED              SEGMENT TYPE 

VAR                  DIRECTIVE 

XDATA                SEGMENT TYPE 

XOR                  OPERATOR 

ZPAGE                SEGMENT TYPE 

[                    DELIMITER 

]                    DELIMITER 

^                    OPERATOR 

^                    DELIMITER 

_OCORE_SIZE          #define, value: 16, line:     169:1        217      234      331      510
                                                                      511      512      513      515

__ARM4TM__           #define, value: 4, line:         0  

__ARM5TM__           #define, value: 5, line:         0  

__ARM5T__            #define, value: 5, line:         0  

__ARM5__             #define, value: 5, line:         0  

__ARM6MEDIA__        #define, value: 6, line:         0  

__ARM6M__            #define, value: 11, line:         0  

__ARM6SM__           #define, value: 12, line:         0  

__ARM6T2__           #define, value: 6, line:         0  

__ARM6__             #define, value: 6, line:         0  

__ARM7EM__           #define, value: 13, line:         0  

__ARM7__             #define, value: 7, line:         0  

__ARMVFPV1__         #define, value: 1, line:         0  

__ARMVFPV2__         #define, value: 2, line:         0  

__ARMVFPV3_D16__     #define, value: 1, line:         0  

__ARMVFPV3_FP16__    #define, value: 1, line:         0  

                                   - core_a -                         Page   38

__ARMVFPV3__         #define, value: 3, line:         0  

__ARMVFPV4__         #define, value: 4, line:         0  

__ARMVFP_D16__       #define, value: 1, line:         0  

__ARMVFP_FP16__      #define, value: 1, line:         0  

__ARMVFP_SP__        #define, value: 1, line:         0  

__ARMVFP__           #define, value: __ARMVFPV4__, line:         0  

__ARM_MEDIA__        #define, value: 1, line:         0  

__ARM_PROFILE_M__    #define, value: 1, line:         0  

__BUILD_NUMBER__     #define,            line:         0  

__CORE_DEF_H         #define, value: , line:      12:1  

__CORE__             #define, value: __ARM7EM__, line:         0  

__DATE__             #define,            line:         0  

__FILE__             #define,            line:         0  

__IAR_SYSTEMS_ASM    #define,            line:         0  

__IAR_SYSTEMS_ASM__  #define,            line:         0  

__IASMARM__          #define, value: 1, line:         0  

__LINE__             #define,            line:         0  

__LITTLE_ENDIAN__    #define, value: 1, line:         0  

__SUBVERSION__       #define,            line:         0  

__TID__              #define,            line:         0  

__TIME__             #define,            line:         0  

__VER__              #define,            line:         0  

_numop_              Target symbol: 0 

_save_op             MACRO 

define               PREPROCESSOR DIRECTIVE 

defined              Target symbol: 0 

elif                 PREPROCESSOR DIRECTIVE 

else                 PREPROCESSOR DIRECTIVE 

endif                PREPROCESSOR DIRECTIVE 

error                PREPROCESSOR DIRECTIVE 

if                   PREPROCESSOR DIRECTIVE 

ifdef                PREPROCESSOR DIRECTIVE 

ifndef               PREPROCESSOR DIRECTIVE 

include              PREPROCESSOR DIRECTIVE 

line                 PREPROCESSOR DIRECTIVE 

message              PREPROCESSOR DIRECTIVE 

offs_R4_R11_regs     #define, value: (40+_OCORE_SIZE), line:     193:1  

offs_flags           #define, value: 2, line:     173:1  

offs_id              #define, value: (4+_OCORE_SIZE), line:     179:1        515

                                   - core_a -                         Page   39

offs_mode            #define, value: (0+_OCORE_SIZE), line:     178:1        217      331      513

offs_next            #define, value: 12, line:     176:1  

offs_prev            #define, value: 8, line:     175:1  

offs_rsv0            #define, value: (20+_OCORE_SIZE), line:     185:1  

offs_rsv1            #define, value: (24+_OCORE_SIZE), line:     186:1  

offs_rsv2            #define, value: (28+_OCORE_SIZE), line:     187:1  

offs_sync            #define, value: 4, line:     174:1  

offs_sync_size       #define, value: (36+_OCORE_SIZE), line:     191:1  

offs_tstaRAM_PSP     #define, value: (12+_OCORE_SIZE), line:     182:1        510

offs_tstack_PSP      #define, value: (8+_OCORE_SIZE), line:     181:1        234      512

offs_tstsize_PSP     #define, value: (16+_OCORE_SIZE), line:     183:1        511

offs_ty              #define, value: 0, line:     172:1  

offs_wait_ms         #define, value: (32+_OCORE_SIZE), line:     189:1  

pragma               PREPROCESSOR DIRECTIVE 

st_LR                #define, value: 20, line:     162:1  

st_PC                #define, value: 24, line:     161:1  

st_PSR               #define, value: 28, line:     160:1  

st_R0                #define, value: 0, line:     167:1  

st_R1                #define, value: 4, line:     166:1  

st_R12               #define, value: 16, line:     163:1  

st_R2                #define, value: 8, line:     165:1  

st_R3                #define, value: 12, line:     164:1  

uint16_t             Target symbol: 0 

undef                PREPROCESSOR DIRECTIVE 

{                    DELIMITER 

|                    OPERATOR 

||                   OPERATOR 

}                    DELIMITER 

~                    OPERATOR 



Segment             Type 	Mode

----------------------------------------

CSTACK              DATA  	REL 

OS_CORE             CODE  	REL 

OS_CORE_DATA        DATA  	REL 

__EXTERNS           CODE  	ABS Org:0 



Label               Mode   Type                   Segment    Value/Offset

------------------------------------------------------------------------------

                                   - core_a -                         Page   40

??DUMMY_SYMBOL_IN_BACKEND_PARSED_OPERANDS
                    ABS    CONST UNTYP.           ASEG       1267 

BusFault_Handler    REL    CONST PUB UNTYP.       OS_CORE    17D 

ExitThread          REL    CONST PUB UNTYP.       OS_CORE    127 

HF_LOOP             REL    CONST UNTYP.           OS_CORE    17B 

HardFault_Handler   REL    CONST PUB UNTYP.       OS_CORE    179 

Infinite_Loop       REL    CONST UNTYP.           OS_CORE    1B3 

InitSheduler        ABS    CONST EXT [004] UNTYP. __EXTERNS  Solved Extern 

LSCAN2_LEDToggle    ABS    CONST EXT [-001] UNTYP. __EXTERNS  Solved Extern 

MemManage_Handler   REL    CONST PUB UNTYP.       OS_CORE    17F 

Reset_Handler       REL    CONST PUB UNTYP.       OS_CORE    1 

ResumeThread        REL    CONST PUB UNTYP.       OS_CORE    105 

SuspendThread       REL    CONST PUB UNTYP.       OS_CORE    10B 

SystemInit          ABS    CONST EXT [003] UNTYP. __EXTERNS  Solved Extern 

SystemTicks         REL    CONST PUB UNTYP.       OS_CORE_DA 14 

TID                 ABS    CONST UNTYP.           ASEG       4F00 

TIM2_IRQHandler     REL    CONST PUB UNTYP.       OS_CORE    75 

UF_LOOP             REL    CONST UNTYP.           OS_CORE    1A9 

UsageFault_Handler  REL    CONST PUB UNTYP.       OS_CORE    181 

__SVC_add_core_obj  ABS    CONST EXT [-001] UNTYP. __EXTERNS  Solved Extern 

__SVC_delete_thread ABS    CONST EXT [-001] UNTYP. __EXTERNS  Solved Extern 

__SVC_set_not_privilegedABS    CONST EXT [-001] UNTYP. __EXTERNS  Solved Extern 

__SVC_set_privilegedABS    CONST EXT [-001] UNTYP. __EXTERNS  Solved Extern 

__iar_data_init3    ABS    CONST EXT [002] UNTYP. __EXTERNS  Solved Extern 

__iar_init_vfp      ABS    CONST EXT [000] UNTYP. __EXTERNS  Solved Extern 

__iar_program_start ABS    CONST EXT [-001] UNTYP. __EXTERNS  Solved Extern 

__lab0              REL    CONST UNTYP.           OS_CORE    1B4 

__lab1              REL    CONST UNTYP.           OS_CORE    1B8 

__lab2              REL    CONST UNTYP.           OS_CORE    1BC 

__lab3              REL    CONST UNTYP.           OS_CORE    1C0 

__lab4              REL    CONST UNTYP.           OS_CORE    1C4 

__lab5              REL    CONST UNTYP.           OS_CORE    1C8 

__lab6              REL    CONST UNTYP.           OS_CORE    1CC 

__lab7              REL    CONST UNTYP.           OS_CORE    1D0 

__lab8              REL    CONST UNTYP.           OS_CORE    1D4 

__low_level_init    ABS    CONST EXT [001] UNTYP. __EXTERNS  Solved Extern 

__vector_table      ABS    CONST EXT [-001] UNTYP. __EXTERNS  Solved Extern 

_ccyc_              REL    CONST PUB UNTYP.       OS_CORE_DA 1C 

_check_current_IT   REL    CONST UNTYP.           OS_CORE    1AB 

_core_flag_lock     REL    CONST PUB UNTYP.       OS_CORE_DA 1E 
                                   - core_a -                         Page   41


_init_root_         REL    CONST UNTYP.           OS_CORE    13 

_mm_flag_lock_      REL    CONST PUB UNTYP.       OS_CORE_DA 1D 

_otot_              REL    CONST PUB UNTYP.       OS_CORE_DA 8 

_pend_              REL    CONST PUB UNTYP.       OS_CORE_DA 4 

_proot_             REL    CONST PUB UNTYP.       OS_CORE_DA 0 

_psw_switch_threads_context_to_R0
                    ABS    CONST EXT [007] UNTYP. __EXTERNS  Solved Extern 

_taskList_          REL    CONST PUB UNTYP.       OS_CORE_DA 10 

_ts_scan_core_obj   ABS    CONST EXT [008] UNTYP. __EXTERNS  Solved Extern 

call_CloseHandle    REL    CONST PUB UNTYP.       OS_CORE    13D 

call_DeleteSystemTimerREL    CONST PUB UNTYP.       OS_CORE    155 

call_GetThreadHandleREL    CONST PUB UNTYP.       OS_CORE    11B 

call_GetThreadId    REL    CONST PUB UNTYP.       OS_CORE    115 

call_IsSystemTimer  REL    CONST PUB UNTYP.       OS_CORE    16D 

call_IsSystemTimerCounterNullREL    CONST PUB UNTYP.       OS_CORE    167 

call_PauseSystemTimerREL    CONST PUB UNTYP.       OS_CORE    15B 

call_RestartSystemTimerREL    CONST PUB UNTYP.       OS_CORE    14F 

call_ResumeSystemTimerREL    CONST PUB UNTYP.       OS_CORE    161 

call_SW_thread      REL    CONST PUB UNTYP.       OS_CORE    143 

call_add_core_obj   REL    CONST PUB UNTYP.       OS_CORE    121 

call_change_core_object_flagsREL    CONST PUB UNTYP.       OS_CORE    137 

call_create_new_threadREL    CONST PUB UNTYP.       OS_CORE    173 

call_delete_thread  REL    CONST PUB UNTYP.       OS_CORE    F3 

call_find_handle    REL    CONST PUB UNTYP.       OS_CORE    149 

call_get_set_thread_prioREL    CONST PUB UNTYP.       OS_CORE    F9 

call_rls_object     REL    CONST PUB UNTYP.       OS_CORE    131 

call_save_thread_sync_parameters
                    REL    CONST PUB UNTYP.       OS_CORE    12B 

call_set_sleep      REL    CONST PUB UNTYP.       OS_CORE    FF 

call_set_suspend    REL    CONST PUB UNTYP.       OS_CORE    10F 

ccfree              ABS    CONST EXT [-001] UNTYP. __EXTERNS  Solved Extern 

core_scan_tasklist  ABS    CONST EXT [009] UNTYP. __EXTERNS  Solved Extern 

dbg_error_led       ABS    CONST EXT [-001] UNTYP. __EXTERNS  Solved Extern 

init_sheduler       REL    CONST UNTYP.           OS_CORE    7 

led_loop            ABS    CONST EXT [-001] UNTYP. __EXTERNS  Solved Extern 

main                ABS    CONST EXT [005] UNTYP. __EXTERNS  Solved Extern 

pctcon              REL    CONST PUB UNTYP.       OS_CORE_DA C 

start_svc           ABS    CONST EXT [006] UNTYP. __EXTERNS  Solved Extern 

sub_retIT_R0_thrd_EX_RETURNABS    CONST EXT [-001] UNTYP. __EXTERNS  Solved Extern 

tfunc_wrapper       REL    CONST PUB UNTYP.       OS_CORE    67 
                                   - core_a -                         Page   42


tswFLdis0           REL    CONST PUB UNTYP.       OS_CORE_DA 18 

ttt_chdis0          REL    CONST UNTYP.           OS_CORE    99 

ttt_no_pend         REL    CONST UNTYP.           OS_CORE    B3 

ttt_ret             REL    CONST UNTYP.           OS_CORE    F1 

twrap_del           REL    CONST PUB UNTYP.       OS_CORE    69 

twrap_ret           REL    CONST UNTYP.           OS_CORE    73 





##############################
#           CRC:0            #
#        Errors:   0         #
#        Warnings: 0         #
#         Bytes: 504         #
##############################



